// <auto-generated />
using System;
using Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(DBContext))]
    [Migration("20241130093355_edditt55")]
    partial class edditt55
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Core.Entities.Account.AAccount", b =>
                {
                    b.Property<int>("AccountId")
                        .HasColumnType("int")
                        .HasColumnName("AccountID");

                    b.Property<int>("AccountCode")
                        .HasColumnType("int");

                    b.Property<int>("AccountLevel")
                        .HasColumnType("int");

                    b.Property<string>("AccountName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("CostCenterId")
                        .HasColumnType("int")
                        .HasColumnName("CostCenterID");

                    b.Property<int?>("CurrencyId")
                        .HasColumnType("int")
                        .HasColumnName("CurrencyID");

                    b.Property<int?>("DepreciationAccountId")
                        .HasColumnType("int")
                        .HasColumnName("DepreciationAccountID");

                    b.Property<bool?>("HasDetailedAccounts")
                        .HasColumnType("bit");

                    b.Property<decimal?>("LimitOverflow")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int")
                        .HasColumnName("ParentID");

                    b.Property<int?>("ProvisionAccountId")
                        .HasColumnType("int")
                        .HasColumnName("ProvisionAccountID");

                    b.HasKey("AccountId");

                    b.HasIndex("CostCenterId");

                    b.HasIndex("DepreciationAccountId");

                    b.HasIndex("ParentId");

                    b.HasIndex("ProvisionAccountId");

                    b.ToTable("A_Accounts", (string)null);
                });

            modelBuilder.Entity("Core.Entities.Account.ACashFlow", b =>
                {
                    b.Property<int>("VoucherId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("VoucherID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VoucherId"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int?>("BankId")
                        .HasColumnType("int")
                        .HasColumnName("BankID");

                    b.Property<int?>("BranchID")
                        .HasColumnType("int");

                    b.Property<string>("CheckNo")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("CurrencyId")
                        .HasColumnType("int")
                        .HasColumnName("CurrencyID");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("PaymentMethod")
                        .HasColumnType("int");

                    b.Property<string>("Remarks")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("StatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1)
                        .HasColumnName("StatusID");

                    b.Property<int?>("SupplierId")
                        .HasColumnType("int")
                        .HasColumnName("SupplierID");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.Property<DateTime>("VoucherDate")
                        .HasColumnType("datetime");

                    b.Property<int>("VoucherNo")
                        .HasColumnType("int");

                    b.Property<DateTime>("VoucherTime")
                        .HasColumnType("datetime");

                    b.Property<int>("VoucherTypeId")
                        .HasColumnType("int")
                        .HasColumnName("VoucherTypeID");

                    b.HasKey("VoucherId");

                    b.HasIndex("BranchID");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("StatusId");

                    b.HasIndex("SupplierId");

                    b.HasIndex("UserId");

                    b.HasIndex("VoucherTypeId");

                    b.ToTable("A_CashFlow", (string)null);
                });

            modelBuilder.Entity("Core.Entities.Account.ACashFlowStatus", b =>
                {
                    b.Property<int>("StatusId")
                        .HasColumnType("int")
                        .HasColumnName("StatusID");

                    b.Property<string>("StatusNameAr")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("StatusNameEn")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("StatusId");

                    b.ToTable("A_CashFlowStatus", (string)null);
                });

            modelBuilder.Entity("Core.Entities.Account.ACashFlowType", b =>
                {
                    b.Property<int>("VoucherTypeId")
                        .HasColumnType("int")
                        .HasColumnName("VoucherTypeID");

                    b.Property<string>("VoucherTypeNameAr")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("VoucherTypeNameEn")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("VoucherTypeId");

                    b.ToTable("A_CashFlowType", (string)null);
                });

            modelBuilder.Entity("Core.Entities.Account.ACostCenter", b =>
                {
                    b.Property<int>("CostCenterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CostCenterId"));

                    b.Property<int>("CostCode")
                        .HasColumnType("int");

                    b.Property<int>("CostLevel")
                        .HasColumnType("int");

                    b.Property<string>("CostName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CurrencyId")
                        .HasColumnType("int");

                    b.Property<bool?>("HasDetailedAccounts")
                        .HasColumnType("bit");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.HasKey("CostCenterId");

                    b.ToTable("ACostCenter");
                });

            modelBuilder.Entity("Core.Entities.Clients.ClientSecurityFile", b =>
                {
                    b.Property<long>("ClientSecId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ClientSecId"));

                    b.Property<string>("Add1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Add2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Add3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Add4")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NatId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ClientSecId");

                    b.ToTable("ClientSecurityFile");
                });

            modelBuilder.Entity("Core.Entities.Clients.ExAttachmentType", b =>
                {
                    b.Property<int>("TypeId")
                        .HasColumnType("int")
                        .HasColumnName("TypeID");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("TypeNameAr")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("TypeNameEn")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("TypeId");

                    b.ToTable("EX_AttachmentType", (string)null);
                });

            modelBuilder.Entity("Core.Entities.Clients.ExClient", b =>
                {
                    b.Property<int>("ClientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ClientId"));

                    b.Property<string>("Address")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("BirthCityId")
                        .HasColumnType("int")
                        .HasColumnName("BirthCityID");

                    b.Property<int?>("BirthCountryId")
                        .HasColumnType("int")
                        .HasColumnName("BirthCountryID");

                    b.Property<DateTime?>("Birthdate")
                        .HasColumnType("datetime");

                    b.Property<int?>("BranchID")
                        .HasColumnType("int");

                    b.Property<decimal?>("Capital")
                        .HasColumnType("decimal(18, 0)");

                    b.Property<string>("ClientCode")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(16)");

                    b.Property<string>("ClientNameAr")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ClientNameEn")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("ClientTypeId")
                        .HasColumnType("int")
                        .HasColumnName("ClientTypeID");

                    b.Property<int?>("CountryId")
                        .HasColumnType("int")
                        .HasColumnName("CountryID");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("CrexpiredDate")
                        .HasColumnType("datetime")
                        .HasColumnName("CRExpiredDate");

                    b.Property<string>("Crnumber")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("CRNumber");

                    b.Property<int?>("ExchangePurposeId")
                        .HasColumnType("int")
                        .HasColumnName("ExchangePurposeID");

                    b.Property<bool>("HasFullData")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("IdexpiredDate")
                        .HasColumnType("datetime")
                        .HasColumnName("IDExpiredDate");

                    b.Property<string>("IdexpiryDate")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("IDExpiryDate");

                    b.Property<string>("Idnumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("IDNumber");

                    b.Property<string>("Idsource")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("IDSource");

                    b.Property<int?>("IdsourceId")
                        .HasColumnType("int")
                        .HasColumnName("IDSourceID");

                    b.Property<int?>("IdtypeId")
                        .HasColumnType("int")
                        .HasColumnName("IDTypeID");

                    b.Property<decimal?>("Income")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("IncomeSource")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("IncomeSourceId")
                        .HasColumnType("int")
                        .HasColumnName("IncomeSourceID");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSuspended")
                        .HasColumnType("bit");

                    b.Property<string>("JobAuthority")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("JobId")
                        .HasColumnType("int")
                        .HasColumnName("JobID");

                    b.Property<string>("JobTitle")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Mobile")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("OtherMobile")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("OthrePhone")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("PurposeOfExchange")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Sector")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Specialty")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Sponsor")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("SuspiciousCount")
                        .HasColumnType("int");

                    b.Property<int>("SuspiciousCountLocal")
                        .HasColumnType("int");

                    b.Property<bool>("SuspiciousUpdated")
                        .HasColumnType("bit");

                    b.Property<string>("UnifiedNumber")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("ClientId");

                    b.HasIndex("BirthCityId");

                    b.HasIndex("BirthCountryId");

                    b.HasIndex("BranchID");

                    b.HasIndex("CountryId");

                    b.HasIndex("ExchangePurposeId");

                    b.HasIndex("IdsourceId");

                    b.HasIndex("IncomeSourceId");

                    b.ToTable("EX_Clients", (string)null);
                });

            modelBuilder.Entity("Core.Entities.Clients.ExClientsAttachment", b =>
                {
                    b.Property<int>("ClientAttachmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ClientAttachmentID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ClientAttachmentId"));

                    b.Property<string>("AttachmentFilePath")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("AttachmentName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("AttachmentTypeId")
                        .HasColumnType("int")
                        .HasColumnName("AttachmentTypeID");

                    b.Property<int>("ClientId")
                        .HasColumnType("int")
                        .HasColumnName("ClientID");

                    b.Property<bool>("HasAttachment")
                        .HasColumnType("bit");

                    b.Property<bool>("HasAttachmentPdf")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsOptimized")
                        .HasColumnType("bit");

                    b.HasKey("ClientAttachmentId");

                    b.HasIndex("AttachmentTypeId");

                    b.HasIndex("ClientId");

                    b.ToTable("EX_ClientsAttachments", (string)null);
                });

            modelBuilder.Entity("Core.Entities.Clients.ExClientsMembership", b =>
                {
                    b.Property<int>("MembershipId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("MembershipID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MembershipId"));

                    b.Property<int>("ClientId")
                        .HasColumnType("int")
                        .HasColumnName("ClientID");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime");

                    b.Property<bool?>("HasAttachment")
                        .HasColumnType("bit");

                    b.Property<bool?>("HasAttachmentPdf")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("JobTitle")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("Salary")
                        .HasColumnType("decimal(18, 0)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime");

                    b.Property<string>("path")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MembershipId")
                        .HasName("PK_EX_ClientMemberships");

                    b.HasIndex("ClientId");

                    b.ToTable("EX_ClientsMemberships", (string)null);
                });

            modelBuilder.Entity("Core.Entities.Clients.ExClientsNote", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<string>("Desc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("NoteDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("NoteType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("ExClientsNote");
                });

            modelBuilder.Entity("Core.Entities.Clients.ExClientsRepresentative", b =>
                {
                    b.Property<int>("RepresentativeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("RepresentativeID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RepresentativeId"));

                    b.Property<int>("ClientId")
                        .HasColumnType("int")
                        .HasColumnName("ClientID");

                    b.Property<bool?>("HasAttachment")
                        .HasColumnType("bit");

                    b.Property<bool?>("HasAttachmentPdf")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsOptimized")
                        .HasColumnType("bit");

                    b.Property<string>("RepresentativeName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("path")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RepresentativeId");

                    b.HasIndex("ClientId");

                    b.ToTable("EX_ClientsRepresentatives", (string)null);
                });

            modelBuilder.Entity("Core.Entities.Clients.ExClientsType", b =>
                {
                    b.Property<int>("ClientTypeId")
                        .HasColumnType("int")
                        .HasColumnName("ClientTypeID");

                    b.Property<string>("ClientTypeNameAr")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("ClientTypeNameEn")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<int?>("MonetaryAgencyReportId")
                        .HasColumnType("int")
                        .HasColumnName("MonetaryAgencyReportID");

                    b.HasKey("ClientTypeId");

                    b.ToTable("EX_ClientsType", (string)null);
                });

            modelBuilder.Entity("Core.Entities.Clients.ExSupplier", b =>
                {
                    b.Property<int>("SupplierId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SupplierID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SupplierId"));

                    b.Property<int?>("AccountId")
                        .HasColumnType("int")
                        .HasColumnName("AccountID");

                    b.Property<string>("BankAccount")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("BranchID")
                        .HasColumnType("int");

                    b.Property<int?>("BranchId")
                        .HasColumnType("int")
                        .HasColumnName("BranchID");

                    b.Property<int?>("CountryId")
                        .HasColumnType("int")
                        .HasColumnName("CountryID");

                    b.Property<decimal?>("CreditLimit")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<DateTime?>("CrexpiredDate")
                        .HasColumnType("datetime")
                        .HasColumnName("CRExpiredDate");

                    b.Property<string>("Crnumber")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("CRNumber");

                    b.Property<decimal>("CurrencyExRate")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<int>("CurrencyId")
                        .HasColumnType("int")
                        .HasColumnName("CurrencyID");

                    b.Property<string>("Email")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Fax")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsMainBranch")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LicenseExpiredDate")
                        .HasColumnType("datetime");

                    b.Property<string>("LicenseNo")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Sector")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SupplierCode")
                        .HasColumnType("int");

                    b.Property<string>("SupplierNameAr")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SupplierNameEn")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("SupplierTypeId")
                        .HasColumnType("int")
                        .HasColumnName("SupplierTypeID");

                    b.Property<string>("UnifiedNumber")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("SupplierId");

                    b.HasIndex("AccountId");

                    b.HasIndex("BranchID");

                    b.HasIndex("CountryId");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("SupplierTypeId");

                    b.ToTable("EX_Suppliers", null, t =>
                        {
                            t.Property("BranchID")
                                .HasColumnName("BranchID1");
                        });
                });

            modelBuilder.Entity("Core.Entities.Clients.ExSuppliersType", b =>
                {
                    b.Property<int>("SupplierTypeId")
                        .HasColumnType("int")
                        .HasColumnName("SupplierTypeID");

                    b.Property<int?>("MonetaryAgencyReportId")
                        .HasColumnType("int")
                        .HasColumnName("MonetaryAgencyReportID");

                    b.Property<string>("SupplierTypeNameAr")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("SupplierTypeNameEn")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.HasKey("SupplierTypeId");

                    b.ToTable("EX_SuppliersType", (string)null);
                });

            modelBuilder.Entity("Core.Entities.Clients.IsilList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("AliasName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Nationality")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("Uid")
                        .HasColumnType("int")
                        .HasColumnName("UID");

                    b.HasKey("Id");

                    b.ToTable("ISIL_List", (string)null);
                });

            modelBuilder.Entity("Core.Entities.Clients.IsilXmlDatum", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    b.Property<DateTime?>("IsilLastUpdate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("LastUpdate")
                        .HasColumnType("datetime");

                    b.Property<string>("XmlData")
                        .HasColumnType("xml");

                    b.HasKey("Id");

                    b.ToTable("ISIL_XmlData", (string)null);
                });

            modelBuilder.Entity("Core.Entities.LookUps.Currency", b =>
                {
                    b.Property<int>("CurrencyId")
                        .HasColumnType("int")
                        .HasColumnName("CurrencyID");

                    b.Property<int>("BranchID")
                        .HasColumnType("int");

                    b.Property<decimal>("BuyPrice")
                        .HasColumnType("decimal(18, 14)");

                    b.Property<int>("CurrencyCode")
                        .HasColumnType("int");

                    b.Property<string>("CurrencyNameAr")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CurrencyNameEn")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<decimal>("OpeningBalance")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("OpeningPrice")
                        .HasColumnType("decimal(18, 14)");

                    b.Property<DateTime?>("OpenningBalanceDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("SalePrice")
                        .HasColumnType("decimal(18, 14)");

                    b.Property<bool>("ShowInPricesScreen")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Sign")
                        .IsRequired()
                        .HasMaxLength(4)
                        .HasColumnType("nvarchar(4)");

                    b.Property<int>("TreasuryId")
                        .HasColumnType("int");

                    b.Property<decimal>("ValuationPrice")
                        .HasColumnType("decimal(18, 14)");

                    b.HasKey("CurrencyId")
                        .HasName("PK_Ex_Currencies");

                    b.HasIndex("BranchID");

                    b.HasIndex("TreasuryId");

                    b.HasIndex(new[] { "CurrencyId" }, "IX_EX_Currencies");

                    b.ToTable("Currencies");
                });

            modelBuilder.Entity("Core.Entities.LookUps.CurrencyBase", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<int>("CurrencyCode")
                        .HasColumnType("int");

                    b.Property<string>("CurrencyNameAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CurrencyNameEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Sign")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CurrencyBase");
                });

            modelBuilder.Entity("Core.Entities.LookUps.ExBank", b =>
                {
                    b.Property<int>("BankId")
                        .HasColumnType("int")
                        .HasColumnName("BankID");

                    b.Property<int?>("AccountId")
                        .HasColumnType("int")
                        .HasColumnName("AccountID");

                    b.Property<string>("BankAccountNameAr")
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<string>("BankAccountNameEn")
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<int>("IsActve")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("RiskRate")
                        .HasColumnType("int");

                    b.HasKey("BankId");

                    b.HasIndex("AccountId");

                    b.ToTable("EX_Banks", (string)null);
                });

            modelBuilder.Entity("Core.Entities.LookUps.ExClientJob", b =>
                {
                    b.Property<int>("JobId")
                        .HasColumnType("int")
                        .HasColumnName("JobID");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("JobCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("JobName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("JobNameEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SeverityId")
                        .HasColumnType("int")
                        .HasColumnName("SeverityID");

                    b.HasKey("JobId");

                    b.HasIndex("SeverityId");

                    b.HasIndex(new[] { "JobCode" }, "UQ_EX_ClientJob_JobCode")
                        .IsUnique();

                    b.HasIndex(new[] { "JobName" }, "UQ_EX_ClientJob_JobName")
                        .IsUnique();

                    b.ToTable("EX_ClientJob", (string)null);
                });

            modelBuilder.Entity("Core.Entities.LookUps.ExClientJobSeverity", b =>
                {
                    b.Property<int>("SeverityId")
                        .HasColumnType("int")
                        .HasColumnName("SeverityID");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("SeverityNameAr")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SeverityNameEn")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("SeverityId");

                    b.ToTable("EX_ClientJobSeverity", (string)null);
                });

            modelBuilder.Entity("Core.Entities.LookUps.ExCountry", b =>
                {
                    b.Property<int>("CountryId")
                        .HasColumnType("int")
                        .HasColumnName("CountryID");

                    b.Property<string>("CountryNameAr")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("CountryNameEn")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("IsActve")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("SeverityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1)
                        .HasColumnName("SeverityID");

                    b.HasKey("CountryId")
                        .HasName("PK_Country");

                    b.HasIndex("SeverityId");

                    b.ToTable("EX_Countries", (string)null);
                });

            modelBuilder.Entity("Core.Entities.LookUps.ExExchangePurpose", b =>
                {
                    b.Property<int>("ExchangePurposeId")
                        .HasColumnType("int")
                        .HasColumnName("ExchangePurposeID");

                    b.Property<string>("ExchangePurposeNameAr")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ExchangePurposeNameEn")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.HasKey("ExchangePurposeId");

                    b.HasIndex(new[] { "ExchangePurposeNameAr" }, "UQ_EX_ExchangePurposes")
                        .IsUnique();

                    b.ToTable("EX_ExchangePurposes", (string)null);
                });

            modelBuilder.Entity("Core.Entities.LookUps.ExIdsource", b =>
                {
                    b.Property<int>("IdsourceId")
                        .HasColumnType("int")
                        .HasColumnName("IDSourceID");

                    b.Property<int>("CountryId")
                        .HasColumnType("int")
                        .HasColumnName("CountryID");

                    b.Property<string>("IdsourceNameAr")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("IDSourceNameAr");

                    b.Property<string>("IdsourceNameEn")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("IDSourceNameEn");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.HasKey("IdsourceId");

                    b.HasIndex("CountryId");

                    b.ToTable("EX_IDSources", (string)null);
                });

            modelBuilder.Entity("Core.Entities.LookUps.ExIncomeSource", b =>
                {
                    b.Property<int>("IncomeSourceId")
                        .HasColumnType("int")
                        .HasColumnName("IncomeSourceID");

                    b.Property<string>("IncomeSourceNameAr")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("IncomeSourceNameEn")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.HasKey("IncomeSourceId");

                    b.HasIndex(new[] { "IncomeSourceNameAr" }, "UQ_EX_IncomeSource_NameAr")
                        .IsUnique();

                    b.ToTable("EX_IncomeSources", (string)null);
                });

            modelBuilder.Entity("Core.Entities.LookUps.Treasury", b =>
                {
                    b.Property<int>("TreasuryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TreasuryId"));

                    b.Property<int?>("AccountId")
                        .HasColumnType("int");

                    b.Property<int>("BranchID")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("OwnerId")
                        .HasColumnType("int");

                    b.Property<string>("TreasuryNameAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TreasuryNameEn")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TreasuryId");

                    b.HasIndex("AccountId");

                    b.HasIndex("BranchID");

                    b.HasIndex("OwnerId");

                    b.ToTable("Treasury");
                });

            modelBuilder.Entity("Core.Entities.Sec.ExBranch", b =>
                {
                    b.Property<int>("BranchId")
                        .HasColumnType("int")
                        .HasColumnName("BranchID");

                    b.Property<int?>("AccountId")
                        .HasColumnType("int")
                        .HasColumnName("AccountID");

                    b.Property<string>("BranchCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("BranchNameAr")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("BranchNameEn")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("ManagerId")
                        .HasColumnType("int");

                    b.HasKey("BranchId")
                        .HasName("PK_Branches");

                    b.ToTable("EX_Branches", (string)null);
                });

            modelBuilder.Entity("Core.Entities.Sec.SecForm", b =>
                {
                    b.Property<int>("FormId")
                        .HasColumnType("int")
                        .HasColumnName("FormID");

                    b.Property<string>("DisplayNameAr")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("DisplayNameEn")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("FormName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("FormOrder")
                        .HasColumnType("int");

                    b.Property<bool>("Installed")
                        .HasColumnType("bit");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int")
                        .HasColumnName("ParentID");

                    b.Property<bool>("ShowInLog")
                        .HasColumnType("bit");

                    b.Property<string>("TablesForLog")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("FormId");

                    b.HasIndex(new[] { "ParentId", "FormOrder" }, "IX_Sec_Forms");

                    b.ToTable("Sec_Forms", (string)null);
                });

            modelBuilder.Entity("Core.Entities.Sec.SecFormsFunction", b =>
                {
                    b.Property<int>("FormFunctionId")
                        .HasColumnType("int")
                        .HasColumnName("FormFunctionID");

                    b.Property<int>("FormId")
                        .HasColumnType("int")
                        .HasColumnName("FormID");

                    b.Property<int>("FunctionId")
                        .HasColumnType("int")
                        .HasColumnName("FunctionID");

                    b.HasKey("FormFunctionId");

                    b.HasIndex("FunctionId");

                    b.HasIndex(new[] { "FormId", "FunctionId" }, "UQ_Sec_FormsFunctions")
                        .IsUnique();

                    b.ToTable("Sec_FormsFunctions", (string)null);
                });

            modelBuilder.Entity("Core.Entities.Sec.SecFunction", b =>
                {
                    b.Property<int>("FunctionId")
                        .HasColumnType("int")
                        .HasColumnName("FunctionID");

                    b.Property<string>("FunctionName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FunctionNameAr")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FunctionNameEn")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("FunctionOrder")
                        .HasColumnType("int");

                    b.Property<bool>("Logged")
                        .HasColumnType("bit");

                    b.HasKey("FunctionId");

                    b.HasIndex(new[] { "FunctionName" }, "UQ_Sec_Functions");

                    b.ToTable("Sec_Functions", (string)null);
                });

            modelBuilder.Entity("Core.Entities.Sec.SecPermissionType", b =>
                {
                    b.Property<int>("PermissionTypeId")
                        .HasColumnType("int")
                        .HasColumnName("PermissionTypeId");

                    b.Property<string>("PermissionTypeNameAr")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PermissionTypeNameEn")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("PermissionTypeId")
                        .HasName("PK_PermissionTypes");

                    b.ToTable("SecPermissionType", (string)null);
                });

            modelBuilder.Entity("Core.Entities.Sec.SecPermissionTypeBranches", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("BranchId")
                        .HasColumnType("int");

                    b.Property<int>("PermissionTypeId")
                        .HasColumnType("int");

                    b.Property<bool>("Selected")
                        .HasColumnType("bit");

                    b.HasKey("ID");

                    b.HasIndex("BranchId");

                    b.HasIndex("PermissionTypeId");

                    b.ToTable("SecPermissionTypeBranches");
                });

            modelBuilder.Entity("Core.Entities.Sec.SecTransactionLog", b =>
                {
                    b.Property<int>("LogId")
                        .HasColumnType("int")
                        .HasColumnName("LogID");

                    b.Property<DateTime>("ActionDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ActionDetails")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FormId")
                        .HasColumnType("int")
                        .HasColumnName("FormID");

                    b.Property<int>("FunctionId")
                        .HasColumnType("int")
                        .HasColumnName("FunctionID");

                    b.Property<int>("ItemId")
                        .HasColumnType("int")
                        .HasColumnName("ItemID");

                    b.Property<int>("ItemNo")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("LogId");

                    b.HasIndex("FormId");

                    b.HasIndex("FunctionId");

                    b.HasIndex("UserId");

                    b.ToTable("Sec_TransactionLog", (string)null);
                });

            modelBuilder.Entity("Core.Entities.Sec.SecUser", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.Property<int?>("BranchId")
                        .HasColumnType("int")
                        .HasColumnName("BranchID");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSupervisor")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastNotifcationDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("LiveExchange")
                        .HasColumnType("bit");

                    b.Property<string>("LocalIpaddress")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("LocalIPAddress");

                    b.Property<string>("LoginName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("OnlineStatus")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Password")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("PermissionTypeId")
                        .HasColumnType("int");

                    b.Property<string>("ThemeName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("UserCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UserNameAr")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("UserNameEn")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("UserId");

                    b.HasIndex("BranchId");

                    b.HasIndex("PermissionTypeId");

                    b.HasIndex(new[] { "UserCode" }, "UQ_SecurityUsers_Code");

                    b.HasIndex(new[] { "LoginName" }, "UQ_SecurityUsers_LoginName")
                        .IsUnique();

                    b.ToTable("Sec_Users", (string)null);
                });

            modelBuilder.Entity("Core.Entities.Sec.SecUsersForm", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    b.Property<int>("FormId")
                        .HasColumnType("int")
                        .HasColumnName("FormID");

                    b.Property<int>("PermissionTypeId")
                        .HasColumnType("int")
                        .HasColumnName("PermissionTypeId");

                    b.Property<int?>("SecUserUserId")
                        .HasColumnType("int");

                    b.Property<bool>("Selected")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("FormId");

                    b.HasIndex("SecUserUserId");

                    b.HasIndex(new[] { "PermissionTypeId", "FormId" }, "UQ_Sec_UsersForms")
                        .IsUnique();

                    b.ToTable("Sec_UsersForms", (string)null);
                });

            modelBuilder.Entity("Core.Entities.Sec.SecUsersFunction", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    b.Property<int>("FormFunctionId")
                        .HasColumnType("int")
                        .HasColumnName("FormFunctionID");

                    b.Property<int>("PermissionTypeId")
                        .HasColumnType("int")
                        .HasColumnName("PermissionTypeId");

                    b.Property<int?>("SecUserUserId")
                        .HasColumnType("int");

                    b.Property<bool>("Selected")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("FormFunctionId");

                    b.HasIndex("SecUserUserId");

                    b.HasIndex(new[] { "PermissionTypeId", "FormFunctionId" }, "UQ_Sec_UsersFunctions")
                        .IsUnique();

                    b.ToTable("Sec_UsersFunctions", (string)null);
                });

            modelBuilder.Entity("Core.Entities.TRN_Invoices.ExFormingStatus", b =>
                {
                    b.Property<int>("FormingStatusId")
                        .HasColumnType("int")
                        .HasColumnName("FormingStatusID");

                    b.Property<string>("FormingStatusNameAr")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FormingStatusNameEn")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("RequireApproval")
                        .HasColumnType("bit");

                    b.Property<bool>("RequireReview")
                        .HasColumnType("bit");

                    b.HasKey("FormingStatusId");

                    b.ToTable("EX_FormingStatus", (string)null);
                });

            modelBuilder.Entity("Core.Entities.TRN_Invoices.ExInvoice", b =>
                {
                    b.Property<int>("InvoiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("InvoiceID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InvoiceId"));

                    b.Property<decimal>("AvTaxAmount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("AvTaxPercentage")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int?>("BankId")
                        .HasColumnType("int")
                        .HasColumnName("BankID");

                    b.Property<int>("BranchID")
                        .HasColumnType("int");

                    b.Property<int?>("ClientId")
                        .HasColumnType("int")
                        .HasColumnName("ClientID");

                    b.Property<decimal>("Commission")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int?>("FormingResponsibleId")
                        .HasColumnType("int")
                        .HasColumnName("FormingResponsibleID");

                    b.Property<string>("FormingStatusIds")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("FormingStatusIDs")
                        .HasDefaultValueSql("((1))");

                    b.Property<int?>("InternalTransferId")
                        .HasColumnType("int")
                        .HasColumnName("InternalTransferID");

                    b.Property<DateTime>("InvoiceDate")
                        .HasColumnType("datetime");

                    b.Property<int>("InvoiceNo")
                        .HasColumnType("int");

                    b.Property<DateTime>("InvoiceTime")
                        .HasColumnType("datetime");

                    b.Property<int>("InvoiceTypeId")
                        .HasColumnType("int")
                        .HasColumnName("InvoiceTypeID");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsPendingWorkflow")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPos")
                        .HasColumnType("bit")
                        .HasColumnName("IsPOS");

                    b.Property<decimal>("Paid")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("PaymentMethod")
                        .HasColumnType("int");

                    b.Property<string>("PurposeOfExchange")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("Remain")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("Remarks")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("StatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1)
                        .HasColumnName("StatusID");

                    b.Property<int?>("TreasuryId")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("InvoiceId");

                    b.HasIndex("BankId");

                    b.HasIndex("BranchID");

                    b.HasIndex("ClientId");

                    b.HasIndex("FormingResponsibleId");

                    b.HasIndex("StatusId");

                    b.HasIndex("TreasuryId");

                    b.HasIndex("UserId");

                    b.HasIndex(new[] { "InvoiceTypeId", "PaymentMethod", "InternalTransferId", "InvoiceTime" }, "IX_EX_Invoices_01");

                    b.HasIndex(new[] { "InvoiceTime", "StatusId" }, "IX_EX_Invoices_02");

                    b.HasIndex(new[] { "InternalTransferId", "StatusId" }, "IX_EX_Invoices_03");

                    b.HasIndex(new[] { "InvoiceTypeId", "InternalTransferId", "StatusId" }, "IX_EX_Invoices_04");

                    b.HasIndex(new[] { "InvoiceTypeId", "InvoiceTime", "StatusId" }, "IX_EX_Invoices_05");

                    b.HasIndex(new[] { "InvoiceNo", "InvoiceDate" }, "UQ_EX_Invoices_InvoiceNo")
                        .IsUnique();

                    b.ToTable("EX_Invoices", (string)null);
                });

            modelBuilder.Entity("Core.Entities.TRN_Invoices.ExInvoiceStatus", b =>
                {
                    b.Property<int>("StatusId")
                        .HasColumnType("int")
                        .HasColumnName("StatusID");

                    b.Property<string>("StatusNameAr")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("StatusNameEn")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("StatusId");

                    b.ToTable("EX_InvoiceStatus", (string)null);
                });

            modelBuilder.Entity("Core.Entities.TRN_Invoices.ExInvoicesDetail", b =>
                {
                    b.Property<int>("InvoiceDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("InvoiceDetailID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InvoiceDetailId"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("CurrencyId")
                        .HasColumnType("int")
                        .HasColumnName("CurrencyID");

                    b.Property<decimal>("ExRate")
                        .HasColumnType("decimal(18, 14)");

                    b.Property<int>("InvoiceId")
                        .HasColumnType("int")
                        .HasColumnName("InvoiceID");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.HasKey("InvoiceDetailId");

                    b.HasIndex("InvoiceId");

                    b.HasIndex(new[] { "CurrencyId" }, "IX_EX_InvoicesDetails_00");

                    b.ToTable("EX_InvoicesDetails", (string)null);
                });

            modelBuilder.Entity("Core.Entities.TRN_Invoices.ExInvoicesType", b =>
                {
                    b.Property<int>("InvoiceTypeId")
                        .HasColumnType("int")
                        .HasColumnName("InvoiceTypeID");

                    b.Property<string>("InvoiceTypeNameAr")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("InvoiceTypeNameEn")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("InvoiceTypeId");

                    b.ToTable("EX_InvoicesType", (string)null);
                });

            modelBuilder.Entity("Core.Entities.TRN_Invoices.ExPaymentMethod", b =>
                {
                    b.Property<int>("PaymentMethod")
                        .HasColumnType("int");

                    b.Property<string>("PaymentMethodNameAr")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PaymentMethodNameEn")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("PaymentMethod");

                    b.ToTable("EX_PaymentMethod", (string)null);
                });

            modelBuilder.Entity("Core.Entities.TRN_Transfers.ExBranchTransfer", b =>
                {
                    b.Property<int>("VoucherId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("VoucherID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VoucherId"));

                    b.Property<int>("BranchID")
                        .HasColumnType("int");

                    b.Property<int?>("BranchId")
                        .HasColumnType("int")
                        .HasColumnName("BranchID");

                    b.Property<string>("Receptionist")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Remarks")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("StatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1)
                        .HasColumnName("StatusID");

                    b.Property<int>("TypeId")
                        .HasColumnType("int")
                        .HasColumnName("TypeID");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("VoucherDate")
                        .HasColumnType("datetime");

                    b.Property<int>("VoucherNo")
                        .HasColumnType("int");

                    b.Property<DateTime>("VoucherTime")
                        .HasColumnType("datetime");

                    b.HasKey("VoucherId");

                    b.HasIndex("BranchID");

                    b.HasIndex("BranchId");

                    b.HasIndex("StatusId");

                    b.HasIndex("TypeId");

                    b.HasIndex("UserId");

                    b.ToTable("EX_BranchTransfers", null, t =>
                        {
                            t.Property("BranchID")
                                .HasColumnName("BranchID1");
                        });
                });

            modelBuilder.Entity("Core.Entities.TRN_Transfers.ExBranchTransferStatus", b =>
                {
                    b.Property<int>("StatusId")
                        .HasColumnType("int")
                        .HasColumnName("StatusID");

                    b.Property<string>("StatusNameAr")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("StatusNameEn")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("StatusId");

                    b.ToTable("EX_BranchTransferStatus", (string)null);
                });

            modelBuilder.Entity("Core.Entities.TRN_Transfers.ExBranchTransferType", b =>
                {
                    b.Property<int>("TypeId")
                        .HasColumnType("int")
                        .HasColumnName("TypeID");

                    b.Property<string>("TypeNameAr")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("TypeNameEn")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("TypeId");

                    b.ToTable("EX_BranchTransferType", (string)null);
                });

            modelBuilder.Entity("Core.Entities.TRN_Transfers.ExBranchTransfersDetail", b =>
                {
                    b.Property<int>("VoucherDetailId")
                        .HasColumnType("int")
                        .HasColumnName("VoucherDetailID");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("CurrencyId")
                        .HasColumnType("int")
                        .HasColumnName("CurrencyID");

                    b.Property<decimal>("ExRate")
                        .HasColumnType("decimal(18, 14)");

                    b.Property<int>("VoucherId")
                        .HasColumnType("int")
                        .HasColumnName("VoucherID");

                    b.HasKey("VoucherDetailId");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("VoucherId");

                    b.ToTable("EX_BranchTransfersDetails", (string)null);
                });

            modelBuilder.Entity("Core.Entities.TRN_Transfers.ExCurrenciesBvr", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<int>("ActionDetailId")
                        .HasColumnType("int")
                        .HasColumnName("ActionDetailID");

                    b.Property<int>("ActionId")
                        .HasColumnType("int")
                        .HasColumnName("ActionID");

                    b.Property<DateTime>("ActionTime")
                        .HasColumnType("datetime");

                    b.Property<string>("ActionType")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("Balance")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("CurrencyId")
                        .HasColumnType("int")
                        .HasColumnName("CurrencyID");

                    b.Property<bool>("IsProcessed")
                        .HasColumnType("bit");

                    b.Property<decimal>("Rate")
                        .HasColumnType("decimal(18, 14)");

                    b.Property<decimal>("ValRate")
                        .HasColumnType("decimal(18, 14)");

                    b.HasKey("Id")
                        .HasName("PK_EX_CurrenciesValRates");

                    b.HasIndex("CurrencyId");

                    b.ToTable("EX_CurrenciesBVR", (string)null);
                });

            modelBuilder.Entity("Core.Entities.TRN_Transfers.ExInternalTransfer", b =>
                {
                    b.Property<int>("TransferId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("TransferID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TransferId"));

                    b.Property<int?>("BranchID")
                        .HasColumnType("int");

                    b.Property<bool>("Closed")
                        .HasColumnType("bit");

                    b.Property<string>("Remarks")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("TransferClosingDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("TransferDate")
                        .HasColumnType("datetime");

                    b.Property<int>("TransferNo")
                        .HasColumnType("int");

                    b.Property<int?>("TreasuryId")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("TransferId");

                    b.HasIndex("BranchID");

                    b.HasIndex("TreasuryId");

                    b.HasIndex("UserId");

                    b.ToTable("EX_InternalTransfers", (string)null);
                });

            modelBuilder.Entity("Core.Entities.TRN_Transfers.ExInternalTransfersDetail", b =>
                {
                    b.Property<int>("TransferDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("TransferDetailID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TransferDetailId"));

                    b.Property<int>("CurrencyId")
                        .HasColumnType("int")
                        .HasColumnName("CurrencyID");

                    b.Property<decimal>("TransferAmount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("TransferId")
                        .HasColumnType("int")
                        .HasColumnName("TransferID");

                    b.Property<string>("TransferRemarks")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("TransferTime")
                        .HasColumnType("datetime");

                    b.Property<int>("TransferType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<int?>("TransferWithUserId")
                        .HasColumnType("int")
                        .HasColumnName("TransferWithUserID");

                    b.HasKey("TransferDetailId")
                        .HasName("PK_EX_InternalTransfers_Details");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("TransferId");

                    b.ToTable("EX_InternalTransfersDetails", (string)null);
                });

            modelBuilder.Entity("Core.Entities.TRN_WholeInvoices.ExWholeInvoice", b =>
                {
                    b.Property<int>("InvoiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("InvoiceID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InvoiceId"));

                    b.Property<decimal>("AvTaxAmount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("AvTaxPercentage")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int?>("BankId")
                        .HasColumnType("int")
                        .HasColumnName("BankID");

                    b.Property<int>("BranchID")
                        .HasColumnType("int");

                    b.Property<DateTime>("InvoiceDate")
                        .HasColumnType("datetime");

                    b.Property<int>("InvoiceNo")
                        .HasColumnType("int");

                    b.Property<DateTime>("InvoiceTime")
                        .HasColumnType("datetime");

                    b.Property<int>("InvoiceTypeId")
                        .HasColumnType("int")
                        .HasColumnName("InvoiceTypeID");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsNotified")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsPendingWorkflow")
                        .HasColumnType("bit");

                    b.Property<decimal>("Paid")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("PaymentMethod")
                        .HasColumnType("int");

                    b.Property<string>("Receptionist")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("Remain")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("Remarks")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("StatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1)
                        .HasColumnName("StatusID");

                    b.Property<decimal>("SupplierCurrencyExRate")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<int>("SupplierCurrencyId")
                        .HasColumnType("int")
                        .HasColumnName("SupplierCurrencyID");

                    b.Property<int>("SupplierId")
                        .HasColumnType("int")
                        .HasColumnName("SupplierID");

                    b.Property<int?>("TreasuryId")
                        .HasColumnType("int");

                    b.Property<int>("UpdatedCount")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("InvoiceId");

                    b.HasIndex("BankId");

                    b.HasIndex("BranchID");

                    b.HasIndex("StatusId");

                    b.HasIndex("SupplierCurrencyId");

                    b.HasIndex("SupplierId");

                    b.HasIndex("TreasuryId");

                    b.HasIndex("UserId");

                    b.HasIndex(new[] { "InvoiceDate", "InvoiceNo" }, "UQ_EX_WholeInvoices_InvoiceNo")
                        .IsUnique();

                    b.HasIndex(new[] { "InvoiceTypeId", "PaymentMethod", "InvoiceTime", "StatusId" }, "UQ_EX_WholeInvoices_PaidRemain");

                    b.ToTable("EX_WholeInvoices", (string)null);
                });

            modelBuilder.Entity("Core.Entities.TRN_WholeInvoices.ExWholeInvoiceStatus", b =>
                {
                    b.Property<int>("StatusId")
                        .HasColumnType("int")
                        .HasColumnName("StatusID");

                    b.Property<string>("StatusNameAr")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("StatusNameEn")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("StatusId");

                    b.ToTable("EX_WholeInvoiceStatus", (string)null);
                });

            modelBuilder.Entity("Core.Entities.TRN_WholeInvoices.ExWholeInvoicesDetail", b =>
                {
                    b.Property<int>("InvoiceDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("InvoiceDetailID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InvoiceDetailId"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("CurrencyId")
                        .HasColumnType("int")
                        .HasColumnName("CurrencyID");

                    b.Property<int>("InvoiceId")
                        .HasColumnType("int")
                        .HasColumnName("InvoiceID");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<decimal>("SupplierExRate")
                        .HasColumnType("decimal(18, 14)");

                    b.Property<decimal>("SystemExRate")
                        .HasColumnType("decimal(18, 8)");

                    b.HasKey("InvoiceDetailId")
                        .HasName("PK_EX_WholeInvoices_Details");

                    b.HasIndex("InvoiceId");

                    b.HasIndex(new[] { "CurrencyId" }, "UQ_EX_WholeInvoices_Amount");

                    b.ToTable("EX_WholeInvoicesDetails", (string)null);
                });

            modelBuilder.Entity("Core.Entities.TRN_WholeInvoices.ExWholePaymentMethod", b =>
                {
                    b.Property<int>("PaymentMethod")
                        .HasColumnType("int");

                    b.Property<string>("PaymentMethodNameAr")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PaymentMethodNameEn")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("PaymentMethod");

                    b.ToTable("EX_WholePaymentMethod", (string)null);
                });

            modelBuilder.Entity("Core.Entities.TRN_WholeInvoices.TrackingData", b =>
                {
                    b.Property<int>("TrackId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TrackId"));

                    b.Property<int>("ActionType")
                        .HasColumnType("int");

                    b.Property<string>("EntityId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("JsonAfter")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("JsonBefore")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TableName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("date")
                        .HasColumnType("datetime2");

                    b.HasKey("TrackId");

                    b.ToTable("TrackingData");
                });

            modelBuilder.Entity("Core.Entities.Taswya.ExTaswya", b =>
                {
                    b.Property<int>("TransferId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TransferId"));

                    b.Property<int?>("BranchID")
                        .HasColumnType("int");

                    b.Property<bool>("Closed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsPendingWorkflow")
                        .HasColumnType("bit");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("StatusId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("TransferClosingDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("TransferDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("TransferNo")
                        .HasColumnType("int");

                    b.Property<int?>("TreasuryId")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("TransferId");

                    b.HasIndex("BranchID");

                    b.HasIndex("TreasuryId");

                    b.HasIndex("UserId");

                    b.ToTable("ExTaswya");
                });

            modelBuilder.Entity("Core.Entities.Taswya.ExTaswyaDetail", b =>
                {
                    b.Property<int>("TransferDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TransferDetailId"));

                    b.Property<int>("CurrencyId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<decimal>("TransferAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("TransferId")
                        .HasColumnType("int");

                    b.Property<string>("TransferRemarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("TransferTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("TransferType")
                        .HasColumnType("int");

                    b.Property<int?>("TransferWithUserId")
                        .HasColumnType("int");

                    b.HasKey("TransferDetailId");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("TransferId");

                    b.ToTable("ExTaswyaDetail");
                });

            modelBuilder.Entity("Core.Entities.TreasuryTransfere.ExTreasuryTransfere", b =>
                {
                    b.Property<int>("TransferId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TransferId"));

                    b.Property<bool>("Closed")
                        .HasColumnType("bit");

                    b.Property<int?>("FromBranchID")
                        .HasColumnType("int");

                    b.Property<int?>("FromTreasuryId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsPendingWorkflow")
                        .HasColumnType("bit");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("StatusId")
                        .HasColumnType("int");

                    b.Property<int?>("ToBranchID")
                        .HasColumnType("int");

                    b.Property<int?>("ToTreasuryId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("TransferClosingDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("TransferDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("TransferNo")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("TransferId");

                    b.HasIndex("FromBranchID");

                    b.HasIndex("FromTreasuryId");

                    b.HasIndex("ToBranchID");

                    b.HasIndex("ToTreasuryId");

                    b.HasIndex("UserId");

                    b.ToTable("ExTreasuryTransfere");
                });

            modelBuilder.Entity("Core.Entities.TreasuryTransfere.ExTreasuryTransfereDetail", b =>
                {
                    b.Property<int>("TransferDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TransferDetailId"));

                    b.Property<int>("CurrencyId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<decimal>("TransferAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("TransferId")
                        .HasColumnType("int");

                    b.Property<string>("TransferRemarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("TransferTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("TransferType")
                        .HasColumnType("int");

                    b.Property<int?>("TransferWithUserId")
                        .HasColumnType("int");

                    b.HasKey("TransferDetailId");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("TransferId");

                    b.ToTable("ExTreasuryTransfereDetail");
                });

            modelBuilder.Entity("Core.Entities.Workflow.WFListOfApprovals", b =>
                {
                    b.Property<int>("ListOfApprovalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ListOfApprovalId"));

                    b.Property<int>("ActionOrder")
                        .HasColumnType("int");

                    b.Property<int>("BranchID")
                        .HasColumnType("int");

                    b.Property<bool>("Islast")
                        .HasColumnType("bit");

                    b.Property<int>("RequestTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("ListOfApprovalId");

                    b.HasIndex("BranchID");

                    b.HasIndex("RequestTypeId");

                    b.ToTable("WFListOfApprovals");
                });

            modelBuilder.Entity("Core.Entities.Workflow.WFRequest", b =>
                {
                    b.Property<int>("RequestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RequestId"));

                    b.Property<int>("BranchID")
                        .HasColumnType("int");

                    b.Property<string>("EntityId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("RequestTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("RequestId");

                    b.HasIndex("BranchID");

                    b.HasIndex("RequestTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("WFRequest");
                });

            modelBuilder.Entity("Core.Entities.Workflow.WFRequestDetails", b =>
                {
                    b.Property<int>("RequestDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RequestDetailId"));

                    b.Property<int>("ActionOrder")
                        .HasColumnType("int");

                    b.Property<int>("ActionType")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("RequestId")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("RequestDetailId");

                    b.HasIndex("RequestId");

                    b.HasIndex("UserId");

                    b.ToTable("WFRequestDetails");
                });

            modelBuilder.Entity("Core.Entities.Workflow.WFRequestType", b =>
                {
                    b.Property<int>("RequestTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RequestTypeId"));

                    b.Property<string>("NameAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RunONLastApprove")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RunOnReject")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RunOnStart")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RequestTypeId");

                    b.ToTable("WFRequestType");
                });

            modelBuilder.Entity("Core.Entities.banks.BankAccount", b =>
                {
                    b.Property<long>("BankAccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("BankAccountId"));

                    b.Property<string>("Accountnumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BankId")
                        .HasColumnType("int");

                    b.Property<int>("CurrencyId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("NameAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("OppenningBalance")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("BankAccountId");

                    b.HasIndex("BankId");

                    b.HasIndex("CurrencyId");

                    b.ToTable("BankAccount");
                });

            modelBuilder.Entity("Core.Entities.banks.BanksBvr", b =>
                {
                    b.Property<long>("BanksBvrId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("BanksBvrId"));

                    b.Property<int>("ActionDetailId")
                        .HasColumnType("int");

                    b.Property<int>("ActionId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ActionTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("ActionType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Balance")
                        .HasColumnType("decimal(18,2)");

                    b.Property<long>("BankAccountId")
                        .HasColumnType("bigint");

                    b.HasKey("BanksBvrId");

                    b.HasIndex("BankAccountId");

                    b.ToTable("BanksBvr");
                });

            modelBuilder.Entity("Core.Entities.banks.BanksTransfere", b =>
                {
                    b.Property<long>("BanksTransfereId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("BanksTransfereId"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime2");

                    b.Property<long>("FromBankAccountId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("ToBankAccountId")
                        .HasColumnType("bigint");

                    b.HasKey("BanksTransfereId");

                    b.ToTable("BanksTransfere");
                });

            modelBuilder.Entity("Core.Entities.banks.BanksTreasuryTransfere", b =>
                {
                    b.Property<long>("BanksTreasuryTransfereId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("BanksTreasuryTransfereId"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<long>("BankAccountId")
                        .HasColumnType("bigint");

                    b.Property<int>("CurrencyId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TreasuryId")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("BanksTreasuryTransfereId");

                    b.HasIndex("CurrencyId");

                    b.ToTable("BanksTreasuryTransfere");
                });

            modelBuilder.Entity("Core.Entities.banks.ProveInOutCheck", b =>
                {
                    b.Property<long>("ProveInOutCheckId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ProveInOutCheckId"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<long>("BankAccountId")
                        .HasColumnType("bigint");

                    b.Property<string>("CheckNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("ProveInOutCheckId");

                    b.ToTable("ProveInOutCheck");
                });

            modelBuilder.Entity("Core.Entities.others.AAccountClassification", b =>
                {
                    b.Property<int>("ClassificationId")
                        .HasColumnType("int")
                        .HasColumnName("ClassificationID");

                    b.Property<int>("ClassificationCode")
                        .HasColumnType("int");

                    b.Property<string>("ClassificationNameAr")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ClassificationNameEn")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ClassificationId");

                    b.ToTable("A_AccountClassification", (string)null);
                });

            modelBuilder.Entity("Core.Entities.others.AJv", b =>
                {
                    b.Property<int>("Jvid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("JVID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Jvid"));

                    b.Property<int?>("BranchID")
                        .HasColumnType("int");

                    b.Property<int?>("BranchTransferId")
                        .HasColumnType("int")
                        .HasColumnName("BranchTransferID");

                    b.Property<int?>("CashFlowId")
                        .HasColumnType("int")
                        .HasColumnName("CashFlowID");

                    b.Property<bool>("Generated")
                        .HasColumnType("bit");

                    b.Property<int?>("InvoiceId")
                        .HasColumnType("int")
                        .HasColumnName("InvoiceID");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("Jvdate")
                        .HasColumnType("datetime")
                        .HasColumnName("JVDate");

                    b.Property<int>("Jvno")
                        .HasColumnType("int")
                        .HasColumnName("JVNo");

                    b.Property<int>("JvstatusId")
                        .HasColumnType("int")
                        .HasColumnName("JVStatusID");

                    b.Property<DateTime>("Jvtime")
                        .HasColumnType("datetime")
                        .HasColumnName("JVTime");

                    b.Property<int>("JvtypeId")
                        .HasColumnType("int")
                        .HasColumnName("JVTypeID");

                    b.Property<string>("Remarks")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("TaswyaTransferId")
                        .HasColumnType("int");

                    b.Property<int?>("TreasuryTransferId")
                        .HasColumnType("int");

                    b.Property<int?>("WholeInvoiceId")
                        .HasColumnType("int")
                        .HasColumnName("WholeInvoiceID");

                    b.HasKey("Jvid");

                    b.HasIndex("BranchID");

                    b.HasIndex("BranchTransferId");

                    b.HasIndex("CashFlowId");

                    b.HasIndex("InvoiceId");

                    b.HasIndex("JvstatusId");

                    b.HasIndex("JvtypeId");

                    b.HasIndex("TaswyaTransferId");

                    b.HasIndex("TreasuryTransferId");

                    b.HasIndex("WholeInvoiceId");

                    b.HasIndex(new[] { "Generated", "Jvtime" }, "IX_A_JVs_01");

                    b.ToTable("A_JVs", (string)null);
                });

            modelBuilder.Entity("Core.Entities.others.AJvAccountSetting", b =>
                {
                    b.Property<int>("AJvAccountSettingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AJvAccountSettingId"));

                    b.Property<string>("AccountId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AccountName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AJvAccountSettingId");

                    b.ToTable("AJvAccountSetting");
                });

            modelBuilder.Entity("Core.Entities.others.AJvsDetail", b =>
                {
                    b.Property<int>("JvdetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("JVDetailID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("JvdetailId"));

                    b.Property<int>("AccountId")
                        .HasColumnType("int")
                        .HasColumnName("AccountID");

                    b.Property<decimal>("Credit")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("CurrencyId")
                        .HasColumnType("int")
                        .HasColumnName("CurrencyID");

                    b.Property<decimal>("Debit")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal?>("ForeignCredit")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal?>("ForeignDebit")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("Jvid")
                        .HasColumnType("int")
                        .HasColumnName("JVID");

                    b.HasKey("JvdetailId");

                    b.HasIndex("AccountId");

                    b.HasIndex(new[] { "CurrencyId" }, "IX_A_JVsDetails_01");

                    b.HasIndex(new[] { "Jvid" }, "IX_A_JVsDetails_02");

                    b.ToTable("A_JVsDetails", (string)null);
                });

            modelBuilder.Entity("Core.Entities.others.AJvstatus", b =>
                {
                    b.Property<int>("StatusId")
                        .HasColumnType("int")
                        .HasColumnName("StatusID");

                    b.Property<string>("StatusNameAr")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("StatusNameEn")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("StatusId");

                    b.ToTable("A_JVStatus", (string)null);
                });

            modelBuilder.Entity("Core.Entities.others.AJvtype", b =>
                {
                    b.Property<int>("JvtypeId")
                        .HasColumnType("int")
                        .HasColumnName("JVTypeID");

                    b.Property<string>("JvtypeNameAr")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("JVTypeNameAr");

                    b.Property<string>("JvtypeNameEn")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("JVTypeNameEn");

                    b.HasKey("JvtypeId");

                    b.ToTable("A_JVType", (string)null);
                });

            modelBuilder.Entity("Core.Entities.others.ASettlement", b =>
                {
                    b.Property<int>("SettlementId")
                        .HasColumnType("int")
                        .HasColumnName("SettlementID");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("SettlementEndDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("SettlementStartDate")
                        .HasColumnType("datetime");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("SettlementId");

                    b.ToTable("A_Settlements", (string)null);
                });

            modelBuilder.Entity("Core.Entities.others.DxTransaction", b =>
                {
                    b.Property<long>("TransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("TransactionID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("TransactionId"));

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime");

                    b.Property<string>("SqlStatement")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("TransactionGuid")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("TransactionId")
                        .HasName("PK_DX_Transactions_1");

                    b.ToTable("DX_Transactions", (string)null);
                });

            modelBuilder.Entity("Core.Entities.others.ExCurrenciesMarketPrice", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    b.Property<int>("CurrencyId")
                        .HasColumnType("int")
                        .HasColumnName("CurrencyID");

                    b.Property<decimal>("MarketPrice")
                        .HasColumnType("decimal(18, 14)");

                    b.Property<DateTime>("MarketPriceDay")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "CurrencyId", "MarketPriceDay" }, "UQ_EX_CurrenciesMarketPrices")
                        .IsUnique();

                    b.ToTable("EX_CurrenciesMarketPrices", (string)null);
                });

            modelBuilder.Entity("Core.Entities.others.ExInternalTransfersClosingDetail", b =>
                {
                    b.Property<int>("TransferClosingDetailId")
                        .HasColumnType("int")
                        .HasColumnName("TransferClosingDetailID");

                    b.Property<decimal>("ActualRemainder")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("CurrencyId")
                        .HasColumnType("int")
                        .HasColumnName("CurrencyID");

                    b.Property<int>("TransferId")
                        .HasColumnType("int")
                        .HasColumnName("TransferID");

                    b.HasKey("TransferClosingDetailId")
                        .HasName("PK_EX_InternalTransfers_ClosingDetails");

                    b.HasIndex(new[] { "TransferId", "CurrencyId" }, "UQ_EX_InternalTransfersClosingDetails_Currency")
                        .IsUnique();

                    b.ToTable("EX_InternalTransfersClosingDetails", (string)null);
                });

            modelBuilder.Entity("Core.Entities.others.ExInternalTransfersDetailsTemp", b =>
                {
                    b.Property<int>("TransferDetailId")
                        .HasColumnType("int")
                        .HasColumnName("TransferDetailID");

                    b.Property<int>("CurrencyId")
                        .HasColumnType("int")
                        .HasColumnName("CurrencyID");

                    b.Property<bool?>("IsAccepted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsNotified")
                        .HasColumnType("bit");

                    b.Property<int?>("ParentTransferDetailId")
                        .HasColumnType("int")
                        .HasColumnName("ParentTransferDetailID");

                    b.Property<decimal>("TransferAmount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("TransferId")
                        .HasColumnType("int")
                        .HasColumnName("TransferID");

                    b.Property<string>("TransferRemarks")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("TransferTime")
                        .HasColumnType("datetime");

                    b.Property<int>("TransferType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<int?>("TransferWithUserId")
                        .HasColumnType("int")
                        .HasColumnName("TransferWithUserID");

                    b.HasKey("TransferDetailId");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("TransferId");

                    b.ToTable("EX_InternalTransfersDetailsTemp", (string)null);
                });

            modelBuilder.Entity("Core.Entities.others.ExLocallyWanted", b =>
                {
                    b.Property<int>("LocallyWantedId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("LocallyWantedID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LocallyWantedId"));

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Nid")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("NID");

                    b.HasKey("LocallyWantedId");

                    b.HasIndex(new[] { "Name" }, "UQ_EX_LocallyWanted_Name")
                        .IsUnique();

                    b.ToTable("EX_LocallyWanted", (string)null);
                });

            modelBuilder.Entity("Core.Entities.others.ExMonetaryAgency", b =>
                {
                    b.Property<int>("MonetaryAgencyReportId")
                        .HasColumnType("int")
                        .HasColumnName("MonetaryAgencyReportID");

                    b.Property<string>("MonetaryAgencyReportName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("OrderBy")
                        .HasColumnType("int");

                    b.HasKey("MonetaryAgencyReportId");

                    b.ToTable("EX_MonetaryAgency", (string)null);
                });

            modelBuilder.Entity("Core.Entities.others.ExSamaCurrency", b =>
                {
                    b.Property<int>("OrderBy")
                        .HasColumnType("int");

                    b.Property<string>("Sign")
                        .IsRequired()
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("varchar(3)");

                    b.ToTable((string)null);

                    b.ToView("EX_SamaCurrencies", (string)null);
                });

            modelBuilder.Entity("Core.Entities.others.ExSetting", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    b.Property<int?>("AccountIdAvTax")
                        .HasColumnType("int")
                        .HasColumnName("AccountID_AvTax");

                    b.Property<int?>("AccountIdBanks")
                        .HasColumnType("int")
                        .HasColumnName("AccountID_Banks");

                    b.Property<int?>("AccountIdCapital")
                        .HasColumnType("int")
                        .HasColumnName("AccountID_Capital");

                    b.Property<int?>("AccountIdCash")
                        .HasColumnType("int")
                        .HasColumnName("AccountID_Cash");

                    b.Property<int?>("AccountIdCommission")
                        .HasColumnType("int")
                        .HasColumnName("AccountID_Commission");

                    b.Property<int?>("AccountIdInvEnd")
                        .HasColumnType("int")
                        .HasColumnName("AccountID_InvEnd");

                    b.Property<int?>("AccountIdInvStart")
                        .HasColumnType("int")
                        .HasColumnName("AccountID_InvStart");

                    b.Property<int?>("AccountIdMainBranch")
                        .HasColumnType("int")
                        .HasColumnName("AccountID_MainBranch");

                    b.Property<int?>("AccountIdProfitLoss")
                        .HasColumnType("int")
                        .HasColumnName("AccountID_ProfitLoss");

                    b.Property<int?>("AccountIdPurchases")
                        .HasColumnType("int")
                        .HasColumnName("AccountID_Purchases");

                    b.Property<int?>("AccountIdSales")
                        .HasColumnType("int")
                        .HasColumnName("AccountID_Sales");

                    b.Property<int?>("AccountIdSuppliers")
                        .HasColumnType("int")
                        .HasColumnName("AccountID_Suppliers");

                    b.Property<int?>("AccountIdZakatExp")
                        .HasColumnType("int")
                        .HasColumnName("AccountID_ZakatExp");

                    b.Property<int?>("AccountIdZakatProv")
                        .HasColumnType("int")
                        .HasColumnName("AccountID_ZakatProv");

                    b.HasKey("Id");

                    b.HasIndex("AccountIdBanks");

                    b.HasIndex("AccountIdCapital");

                    b.HasIndex("AccountIdCash");

                    b.HasIndex("AccountIdCommission");

                    b.HasIndex("AccountIdInvStart");

                    b.HasIndex("AccountIdMainBranch");

                    b.HasIndex("AccountIdPurchases");

                    b.HasIndex("AccountIdSales");

                    b.HasIndex("AccountIdSuppliers");

                    b.HasIndex("AccountIdZakatExp");

                    b.ToTable("EX_Settings", (string)null);
                });

            modelBuilder.Entity("Core.Entities.others.ExStatisticalDataVar", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    b.Property<string>("CellRange")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("CellValue")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("VarCaption")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("VarOrder")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("EX_StatisticalDataVars", (string)null);
                });

            modelBuilder.Entity("Core.Entities.others.ExSuppliersAsBranch", b =>
                {
                    b.Property<int?>("AccountId")
                        .HasColumnType("int")
                        .HasColumnName("AccountID");

                    b.Property<string>("BankAccount")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("BranchId")
                        .HasColumnType("int")
                        .HasColumnName("BranchID");

                    b.Property<int?>("CountryId")
                        .HasColumnType("int")
                        .HasColumnName("CountryID");

                    b.Property<decimal?>("CreditLimit")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<DateTime?>("CrexpiredDate")
                        .HasColumnType("datetime")
                        .HasColumnName("CRExpiredDate");

                    b.Property<string>("Crnumber")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("CRNumber");

                    b.Property<decimal>("CurrencyExRate")
                        .HasColumnType("decimal(10, 8)");

                    b.Property<int>("CurrencyId")
                        .HasColumnType("int")
                        .HasColumnName("CurrencyID");

                    b.Property<string>("Email")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Fax")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool>("IsMainBranch")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LicenseExpiredDate")
                        .HasColumnType("datetime");

                    b.Property<string>("LicenseNo")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("SupplierCode")
                        .HasColumnType("int");

                    b.Property<int>("SupplierId")
                        .HasColumnType("int")
                        .HasColumnName("SupplierID");

                    b.Property<string>("SupplierNameAr")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SupplierNameEn")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("SupplierTypeId")
                        .HasColumnType("int")
                        .HasColumnName("SupplierTypeID");

                    b.Property<string>("UnifiedNumber")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.ToTable((string)null);

                    b.ToView("EX_SuppliersAsBranches", (string)null);
                });

            modelBuilder.Entity("Core.Entities.others.ExSuppliersWithoutBranch", b =>
                {
                    b.Property<int?>("AccountId")
                        .HasColumnType("int")
                        .HasColumnName("AccountID");

                    b.Property<string>("BankAccount")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("BranchId")
                        .HasColumnType("int")
                        .HasColumnName("BranchID");

                    b.Property<int?>("CountryId")
                        .HasColumnType("int")
                        .HasColumnName("CountryID");

                    b.Property<decimal?>("CreditLimit")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<DateTime?>("CrexpiredDate")
                        .HasColumnType("datetime")
                        .HasColumnName("CRExpiredDate");

                    b.Property<string>("Crnumber")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("CRNumber");

                    b.Property<decimal>("CurrencyExRate")
                        .HasColumnType("decimal(10, 8)");

                    b.Property<int>("CurrencyId")
                        .HasColumnType("int")
                        .HasColumnName("CurrencyID");

                    b.Property<string>("Email")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Fax")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool>("IsMainBranch")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LicenseExpiredDate")
                        .HasColumnType("datetime");

                    b.Property<string>("LicenseNo")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("SupplierCode")
                        .HasColumnType("int");

                    b.Property<int>("SupplierId")
                        .HasColumnType("int")
                        .HasColumnName("SupplierID");

                    b.Property<string>("SupplierNameAr")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SupplierNameEn")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("SupplierTypeId")
                        .HasColumnType("int")
                        .HasColumnName("SupplierTypeID");

                    b.Property<string>("UnifiedNumber")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.ToTable((string)null);

                    b.ToView("EX_SuppliersWithoutBranches", (string)null);
                });

            modelBuilder.Entity("Core.Entities.others.Privilage2", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("JobId")
                        .HasColumnType("bigint");

                    b.Property<long?>("PrivilageTypeId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ScreensId")
                        .HasColumnType("bigint");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.ToTable("Privilage2", (string)null);
                });

            modelBuilder.Entity("Core.Entities.others.SysAssembly", b =>
                {
                    b.Property<int>("AssemblyId")
                        .HasColumnType("int")
                        .HasColumnName("AssemblyID");

                    b.Property<byte[]>("AssemblyFile")
                        .HasColumnType("image");

                    b.Property<DateTime>("AssemblyModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("AssemblyName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("AssemblyId");

                    b.ToTable("Sys_Assemblies", (string)null);
                });

            modelBuilder.Entity("Core.Entities.others.SysBackup", b =>
                {
                    b.Property<int>("BackupId")
                        .HasColumnType("int")
                        .HasColumnName("BackupID");

                    b.Property<DateTime>("BackupAssemblyDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("BackupDateTime")
                        .HasColumnType("datetime");

                    b.Property<string>("BackupFilePath")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("BackupId");

                    b.HasIndex("UserId");

                    b.ToTable("Sys_Backups", (string)null);
                });

            modelBuilder.Entity("Core.Entities.others.SysBranch", b =>
                {
                    b.Property<int>("BranchId")
                        .HasColumnType("int")
                        .HasColumnName("BranchID");

                    b.Property<int?>("AccountId")
                        .HasColumnType("int")
                        .HasColumnName("AccountID");

                    b.Property<string>("BranchName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("BranchNameAr")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("BranchNameEn")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("DbsynchDownloaded")
                        .HasColumnType("bit")
                        .HasColumnName("DBSynchDownloaded");

                    b.Property<bool>("DbsynchFinished")
                        .HasColumnType("bit")
                        .HasColumnName("DBSynchFinished");

                    b.Property<DateTime?>("DbsynchLastUpdatedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("DBSynchLastUpdatedDate");

                    b.Property<string>("DbsynchRemarks")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("DBSynchRemarks");

                    b.Property<bool>("DbsynchRequested")
                        .HasColumnType("bit")
                        .HasColumnName("DBSynchRequested");

                    b.Property<bool>("DbsynchRestored")
                        .HasColumnType("bit")
                        .HasColumnName("DBSynchRestored");

                    b.Property<bool>("DbsynchStarted")
                        .HasColumnType("bit")
                        .HasColumnName("DBSynchStarted");

                    b.Property<bool>("DbsynchStopped")
                        .HasColumnType("bit")
                        .HasColumnName("DBSynchStopped");

                    b.Property<string>("LastSyncErrorMessage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastSyncTime")
                        .HasColumnType("datetime");

                    b.HasKey("BranchId");

                    b.HasIndex("AccountId");

                    b.ToTable("Sys_Branches", (string)null);
                });

            modelBuilder.Entity("Core.Entities.others.SysBranchesAuto", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    b.Property<string>("Remarks")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ScheduleTime")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.ToTable("Sys_BranchesAuto", (string)null);
                });

            modelBuilder.Entity("Core.Entities.others.SysMobileIntegration", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    b.Property<string>("ApiUrl")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ClientIdc")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("ClientIDC");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Sys_MobileIntegration", (string)null);
                });

            modelBuilder.Entity("Core.Entities.others.SysReplicationSetting", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    b.Property<string>("AccessKeyId")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("BranchName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsBranch")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("QueueUrl")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("SecretAccessKey")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ServiceUrl")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("Sys_ReplicationSettings", (string)null);
                });

            modelBuilder.Entity("Core.Entities.others.SysSetting", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    b.Property<decimal>("AvTaxPercentage")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<bool>("EnableLiteValidation")
                        .HasColumnType("bit");

                    b.Property<bool>("EnableLogoutWhenIdle")
                        .HasColumnType("bit");

                    b.Property<int>("ExchangeInvoiceNoScope")
                        .HasColumnType("int");

                    b.Property<int>("IdleTimeBeforeLogout")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(600);

                    b.Property<string>("InvoiceBgcForPurchase")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("InvoiceBgcForSale")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("InvoiceFooter")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("JvnoScope")
                        .HasColumnType("int")
                        .HasColumnName("JVNoScope");

                    b.Property<bool>("JvnoScopeByType")
                        .HasColumnType("bit")
                        .HasColumnName("JVNoScopeByType");

                    b.Property<string>("MainServerConString")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("MsDisplayName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("MS_DisplayName");

                    b.Property<bool>("MsNotifySuppliers")
                        .HasColumnType("bit")
                        .HasColumnName("MS_NotifySuppliers");

                    b.Property<string>("MsNotifySuppliersCc")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("MS_NotifySuppliersCC");

                    b.Property<int>("MsNotifySuppliersInterval")
                        .HasColumnType("int")
                        .HasColumnName("MS_NotifySuppliersInterval");

                    b.Property<string>("MsNotifySuppliersMailFooter")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)")
                        .HasColumnName("MS_NotifySuppliersMailFooter");

                    b.Property<string>("MsPassword")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("MS_Password");

                    b.Property<int?>("MsSmtpPort")
                        .HasColumnType("int")
                        .HasColumnName("MS_SmtpPort");

                    b.Property<string>("MsSmtpServer")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("MS_SmtpServer");

                    b.Property<bool>("MsSsl")
                        .HasColumnType("bit")
                        .HasColumnName("MS_SSL");

                    b.Property<string>("MsUsername")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("MS_Username");

                    b.Property<string>("PriceScreenBackColor")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("PriceScreen_BackColor");

                    b.Property<string>("PriceScreenForeColor")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("PriceScreen_ForeColor");

                    b.Property<string>("PriceScreenNotes")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("PriceScreen_Notes");

                    b.Property<string>("ReportHeaderLeft")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("ReportHeaderRight")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("SamaSignature1")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("SAMA_Signature1");

                    b.Property<string>("SamaSignature2")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("SAMA_Signature2");

                    b.Property<string>("SamaSignature3")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("SAMA_Signature3");

                    b.Property<bool>("SamalimitEnabled")
                        .HasColumnType("bit")
                        .HasColumnName("SAMALimit_Enabled");

                    b.Property<decimal>("SamalimitForNonSaudi")
                        .HasColumnType("decimal(18, 0)")
                        .HasColumnName("SAMALimit_ForNonSaudi");

                    b.Property<decimal>("SamalimitForSaudi")
                        .HasColumnType("decimal(18, 0)")
                        .HasColumnName("SAMALimit_ForSaudi");

                    b.Property<bool>("SingleLanguage")
                        .HasColumnType("bit");

                    b.Property<string>("WholeInvoiceFooter")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WholeInvoiceHeader")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("WholesaleInvoiceNoScope")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Sys_Settings", (string)null);
                });

            modelBuilder.Entity("Core.Entities.others.SysSystemInfo", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    b.Property<string>("BranchName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ClientIdentifier")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("CompanyNameAr")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("CompanyNameEn")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("Crno")
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)")
                        .HasColumnName("CRNo");

                    b.Property<string>("ExInvoiceCompanyNameAr")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("EX_InvoiceCompanyNameAr");

                    b.Property<string>("ExInvoiceCompanyNameEn")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("EX_InvoiceCompanyNameEn");

                    b.Property<string>("ExInvoiceFooter")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("EX_InvoiceFooter");

                    b.Property<string>("ExInvoiceHeader")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)")
                        .HasColumnName("EX_InvoiceHeader");

                    b.Property<byte[]>("ExInvoiceLogo")
                        .HasColumnType("varbinary(max)")
                        .HasColumnName("EX_InvoiceLogo");

                    b.Property<string>("ExPortName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("EX_PortName");

                    b.Property<int>("ExSystemCurrencyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1)
                        .HasColumnName("EX_SystemCurrencyID");

                    b.Property<string>("ExWholesaleInvoiceHeaderAr")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)")
                        .HasColumnName("EX_WholesaleInvoiceHeaderAr");

                    b.Property<string>("ExWholesaleInvoiceHeaderEn")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)")
                        .HasColumnName("EX_WholesaleInvoiceHeaderEn");

                    b.Property<DateTime>("InternalDataLastModifiedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("InternalData_LastModifiedDate");

                    b.Property<bool>("IsBranch")
                        .HasColumnType("bit");

                    b.Property<string>("LicenseNo")
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)");

                    b.Property<byte[]>("ReportsLogo")
                        .HasColumnType("varbinary(max)");

                    b.HasKey("Id");

                    b.ToTable("Sys_SystemInfo", (string)null);
                });

            modelBuilder.Entity("Core.Entities.others.SysSystemOption", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    b.Property<bool>("ClientHasAttachments")
                        .HasColumnType("bit");

                    b.Property<bool>("Isil")
                        .HasColumnType("bit")
                        .HasColumnName("ISIL");

                    b.Property<bool>("MembershipProgram")
                        .HasColumnType("bit");

                    b.Property<bool>("NotifySuppliers")
                        .HasColumnType("bit");

                    b.Property<bool>("OptimizeImages")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Sys_SystemOptions", (string)null);
                });

            modelBuilder.Entity("Core.Entities.others.SysWebsiteIntegration", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("WebsiteUrl")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Sys_WebsiteIntegration", (string)null);
                });

            modelBuilder.Entity("Core.Entities.others.TechSupTicket", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Summary")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("TechSup_Tickets", (string)null);
                });

            modelBuilder.Entity("Core.Entities.Account.AAccount", b =>
                {
                    b.HasOne("Core.Entities.Account.ACostCenter", "ACostCenter")
                        .WithMany()
                        .HasForeignKey("CostCenterId");

                    b.HasOne("Core.Entities.Account.AAccount", "DepreciationAccount")
                        .WithMany("InverseDepreciationAccount")
                        .HasForeignKey("DepreciationAccountId")
                        .HasConstraintName("FK_A_Accounts_A_Accounts_Depreciation");

                    b.HasOne("Core.Entities.Account.AAccount", "Parent")
                        .WithMany("InverseParent")
                        .HasForeignKey("ParentId")
                        .HasConstraintName("FK_A_Accounts_A_Accounts_Parent");

                    b.HasOne("Core.Entities.Account.AAccount", "ProvisionAccount")
                        .WithMany("InverseProvisionAccount")
                        .HasForeignKey("ProvisionAccountId")
                        .HasConstraintName("FK_A_Accounts_A_Accounts_Provision");

                    b.Navigation("ACostCenter");

                    b.Navigation("DepreciationAccount");

                    b.Navigation("Parent");

                    b.Navigation("ProvisionAccount");
                });

            modelBuilder.Entity("Core.Entities.Account.ACashFlow", b =>
                {
                    b.HasOne("Core.Entities.Sec.ExBranch", "ExBranch")
                        .WithMany()
                        .HasForeignKey("BranchID");

                    b.HasOne("Core.Entities.LookUps.Currency", "Currency")
                        .WithMany("ACashFlows")
                        .HasForeignKey("CurrencyId")
                        .IsRequired()
                        .HasConstraintName("FK_A_CashFlow_EX_Currencies");

                    b.HasOne("Core.Entities.Account.ACashFlowStatus", "Status")
                        .WithMany("ACashFlows")
                        .HasForeignKey("StatusId")
                        .IsRequired()
                        .HasConstraintName("FK_A_CashFlow_A_CashFlowStatus");

                    b.HasOne("Core.Entities.Clients.ExSupplier", "Supplier")
                        .WithMany("ACashFlows")
                        .HasForeignKey("SupplierId")
                        .HasConstraintName("FK_A_CashFlow_EX_Suppliers");

                    b.HasOne("Core.Entities.Sec.SecUser", "User")
                        .WithMany("ACashFlows")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_A_CashFlow_Sec_Users");

                    b.HasOne("Core.Entities.Account.ACashFlowType", "VoucherType")
                        .WithMany("ACashFlows")
                        .HasForeignKey("VoucherTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_A_CashFlow_A_CashFlowType");

                    b.Navigation("Currency");

                    b.Navigation("ExBranch");

                    b.Navigation("Status");

                    b.Navigation("Supplier");

                    b.Navigation("User");

                    b.Navigation("VoucherType");
                });

            modelBuilder.Entity("Core.Entities.Clients.ExClient", b =>
                {
                    b.HasOne("Core.Entities.LookUps.ExIdsource", "BirthCity")
                        .WithMany("ExClientBirthCities")
                        .HasForeignKey("BirthCityId")
                        .HasConstraintName("FK_EX_Clients_BirthCity");

                    b.HasOne("Core.Entities.LookUps.ExCountry", "BirthCountry")
                        .WithMany("ExClientBirthCountries")
                        .HasForeignKey("BirthCountryId")
                        .HasConstraintName("FK_EX_Clients_BirthCountry");

                    b.HasOne("Core.Entities.Sec.ExBranch", "ExBranch")
                        .WithMany()
                        .HasForeignKey("BranchID");

                    b.HasOne("Core.Entities.LookUps.ExCountry", "Country")
                        .WithMany("ExClientCountries")
                        .HasForeignKey("CountryId")
                        .HasConstraintName("FK_EX_Clients_Nationality");

                    b.HasOne("Core.Entities.LookUps.ExExchangePurpose", "ExchangePurpose")
                        .WithMany("ExClients")
                        .HasForeignKey("ExchangePurposeId")
                        .HasConstraintName("FK_EX_Clients_EX_ExchangePurposes");

                    b.HasOne("Core.Entities.LookUps.ExIdsource", "IdsourceNavigation")
                        .WithMany("ExClientIdsourceNavigations")
                        .HasForeignKey("IdsourceId")
                        .HasConstraintName("FK_EX_Clients_EX_IDSources");

                    b.HasOne("Core.Entities.LookUps.ExIncomeSource", "IncomeSourceNavigation")
                        .WithMany("ExClients")
                        .HasForeignKey("IncomeSourceId")
                        .HasConstraintName("FK_EX_Clients_EX_IncomeSources");

                    b.Navigation("BirthCity");

                    b.Navigation("BirthCountry");

                    b.Navigation("Country");

                    b.Navigation("ExBranch");

                    b.Navigation("ExchangePurpose");

                    b.Navigation("IdsourceNavigation");

                    b.Navigation("IncomeSourceNavigation");
                });

            modelBuilder.Entity("Core.Entities.Clients.ExClientsAttachment", b =>
                {
                    b.HasOne("Core.Entities.Clients.ExAttachmentType", "AttachmentType")
                        .WithMany("ExClientsAttachments")
                        .HasForeignKey("AttachmentTypeId")
                        .HasConstraintName("FK_EX_ClientsAttachments_EX_AttachmentType");

                    b.HasOne("Core.Entities.Clients.ExClient", "Client")
                        .WithMany("ExClientsAttachments")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_EX_ClientsAttachments_EX_Clients");

                    b.Navigation("AttachmentType");

                    b.Navigation("Client");
                });

            modelBuilder.Entity("Core.Entities.Clients.ExClientsMembership", b =>
                {
                    b.HasOne("Core.Entities.Clients.ExClient", "Client")
                        .WithMany("ExClientsMemberships")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_EX_ClientMemberships_EX_Clients");

                    b.Navigation("Client");
                });

            modelBuilder.Entity("Core.Entities.Clients.ExClientsNote", b =>
                {
                    b.HasOne("Core.Entities.Clients.ExClient", "ExClient")
                        .WithMany("ExClientsNote")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ExClient");
                });

            modelBuilder.Entity("Core.Entities.Clients.ExClientsRepresentative", b =>
                {
                    b.HasOne("Core.Entities.Clients.ExClient", "Client")
                        .WithMany("ExClientsRepresentatives")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_EX_ClientsRepresentatives_EX_Clients");

                    b.Navigation("Client");
                });

            modelBuilder.Entity("Core.Entities.Clients.ExSupplier", b =>
                {
                    b.HasOne("Core.Entities.Account.AAccount", "Account")
                        .WithMany("ExSuppliers")
                        .HasForeignKey("AccountId")
                        .HasConstraintName("FK_EX_Suppliers_A_Accounts");

                    b.HasOne("Core.Entities.Sec.ExBranch", "ExBranch")
                        .WithMany()
                        .HasForeignKey("BranchID");

                    b.HasOne("Core.Entities.LookUps.ExCountry", "Country")
                        .WithMany("ExSuppliers")
                        .HasForeignKey("CountryId")
                        .HasConstraintName("FK_EX_Suppliers_Countries");

                    b.HasOne("Core.Entities.LookUps.Currency", null)
                        .WithMany("ExSuppliers")
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Clients.ExSuppliersType", "SupplierType")
                        .WithMany("ExSuppliers")
                        .HasForeignKey("SupplierTypeId")
                        .HasConstraintName("FK_EX_Suppliers_EX_SuppliersType");

                    b.Navigation("Account");

                    b.Navigation("Country");

                    b.Navigation("ExBranch");

                    b.Navigation("SupplierType");
                });

            modelBuilder.Entity("Core.Entities.LookUps.Currency", b =>
                {
                    b.HasOne("Core.Entities.Sec.ExBranch", "ExBranch")
                        .WithMany()
                        .HasForeignKey("BranchID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.LookUps.Treasury", "Treasury")
                        .WithMany()
                        .HasForeignKey("TreasuryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ExBranch");

                    b.Navigation("Treasury");
                });

            modelBuilder.Entity("Core.Entities.LookUps.ExBank", b =>
                {
                    b.HasOne("Core.Entities.Account.AAccount", "Account")
                        .WithMany("ExBanks")
                        .HasForeignKey("AccountId")
                        .HasConstraintName("FK_EX_Banks_A_Accounts");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("Core.Entities.LookUps.ExClientJob", b =>
                {
                    b.HasOne("Core.Entities.LookUps.ExClientJobSeverity", "Severity")
                        .WithMany("ExClientJobs")
                        .HasForeignKey("SeverityId")
                        .IsRequired()
                        .HasConstraintName("FK_EX_ClientJob_EX_ClientJobSeverity");

                    b.Navigation("Severity");
                });

            modelBuilder.Entity("Core.Entities.LookUps.ExCountry", b =>
                {
                    b.HasOne("Core.Entities.LookUps.ExClientJobSeverity", "Severity")
                        .WithMany("ExCountries")
                        .HasForeignKey("SeverityId")
                        .IsRequired()
                        .HasConstraintName("FK_Countries_EX_ClientJobSeverity");

                    b.Navigation("Severity");
                });

            modelBuilder.Entity("Core.Entities.LookUps.ExIdsource", b =>
                {
                    b.HasOne("Core.Entities.LookUps.ExCountry", "Country")
                        .WithMany("ExIdsources")
                        .HasForeignKey("CountryId")
                        .IsRequired()
                        .HasConstraintName("FK_EX_IDSources_Countries");

                    b.Navigation("Country");
                });

            modelBuilder.Entity("Core.Entities.LookUps.Treasury", b =>
                {
                    b.HasOne("Core.Entities.Account.AAccount", "AAccount")
                        .WithMany()
                        .HasForeignKey("AccountId");

                    b.HasOne("Core.Entities.Sec.ExBranch", "ExBranch")
                        .WithMany()
                        .HasForeignKey("BranchID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Sec.SecUser", "SecUser")
                        .WithMany()
                        .HasForeignKey("OwnerId");

                    b.Navigation("AAccount");

                    b.Navigation("ExBranch");

                    b.Navigation("SecUser");
                });

            modelBuilder.Entity("Core.Entities.Sec.SecFormsFunction", b =>
                {
                    b.HasOne("Core.Entities.Sec.SecForm", "Form")
                        .WithMany("SecFormsFunctions")
                        .HasForeignKey("FormId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Sec_FormsFunctions_Sec_Forms");

                    b.HasOne("Core.Entities.Sec.SecFunction", "Function")
                        .WithMany("SecFormsFunctions")
                        .HasForeignKey("FunctionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Sec_FormsFunctions_Sec_Functions");

                    b.Navigation("Form");

                    b.Navigation("Function");
                });

            modelBuilder.Entity("Core.Entities.Sec.SecPermissionTypeBranches", b =>
                {
                    b.HasOne("Core.Entities.Sec.ExBranch", "ExBranch")
                        .WithMany()
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Sec.SecPermissionType", "SecPermissionType")
                        .WithMany()
                        .HasForeignKey("PermissionTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ExBranch");

                    b.Navigation("SecPermissionType");
                });

            modelBuilder.Entity("Core.Entities.Sec.SecTransactionLog", b =>
                {
                    b.HasOne("Core.Entities.Sec.SecForm", "Form")
                        .WithMany("SecTransactionLogs")
                        .HasForeignKey("FormId")
                        .IsRequired()
                        .HasConstraintName("FK_Sec_TransactionLog_Sec_Forms");

                    b.HasOne("Core.Entities.Sec.SecFunction", "Function")
                        .WithMany("SecTransactionLogs")
                        .HasForeignKey("FunctionId")
                        .IsRequired()
                        .HasConstraintName("FK_Sec_TransactionLog_Sec_Functions");

                    b.HasOne("Core.Entities.Sec.SecUser", "User")
                        .WithMany("SecTransactionLogs")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_Sec_TransactionLog_Sec_Users");

                    b.Navigation("Form");

                    b.Navigation("Function");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Core.Entities.Sec.SecUser", b =>
                {
                    b.HasOne("Core.Entities.Sec.ExBranch", "Branch")
                        .WithMany("SecUsers")
                        .HasForeignKey("BranchId")
                        .HasConstraintName("FK_Sec_Users_Branches");

                    b.HasOne("Core.Entities.Sec.SecPermissionType", "PermissionType")
                        .WithMany("SecUsers")
                        .HasForeignKey("PermissionTypeId")
                        .HasConstraintName("FK_Sec_Users_PermissionTypes");

                    b.Navigation("Branch");

                    b.Navigation("PermissionType");
                });

            modelBuilder.Entity("Core.Entities.Sec.SecUsersForm", b =>
                {
                    b.HasOne("Core.Entities.Sec.SecForm", "Form")
                        .WithMany("SecUsersForms")
                        .HasForeignKey("FormId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Sec_UsersForms_Sec_Forms");

                    b.HasOne("Core.Entities.Sec.SecPermissionType", "PermissionType")
                        .WithMany("SecUsersForms")
                        .HasForeignKey("PermissionTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Sec_UsersForms_Sec_Users");

                    b.HasOne("Core.Entities.Sec.SecUser", null)
                        .WithMany("SecUsersForms")
                        .HasForeignKey("SecUserUserId");

                    b.Navigation("Form");

                    b.Navigation("PermissionType");
                });

            modelBuilder.Entity("Core.Entities.Sec.SecUsersFunction", b =>
                {
                    b.HasOne("Core.Entities.Sec.SecFormsFunction", "FormFunction")
                        .WithMany("SecUsersFunctions")
                        .HasForeignKey("FormFunctionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Sec_UsersFunctions_Sec_FormsFunctions");

                    b.HasOne("Core.Entities.Sec.SecPermissionType", "PermissionType")
                        .WithMany("SecUsersFunctions")
                        .HasForeignKey("PermissionTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Sec_UsersFunctions_Sec_Users");

                    b.HasOne("Core.Entities.Sec.SecUser", null)
                        .WithMany("SecUsersFunctions")
                        .HasForeignKey("SecUserUserId");

                    b.Navigation("FormFunction");

                    b.Navigation("PermissionType");
                });

            modelBuilder.Entity("Core.Entities.TRN_Invoices.ExInvoice", b =>
                {
                    b.HasOne("Core.Entities.LookUps.ExBank", "Bank")
                        .WithMany("ExInvoices")
                        .HasForeignKey("BankId")
                        .HasConstraintName("FK_EX_Invoices_EX_Banks");

                    b.HasOne("Core.Entities.Sec.ExBranch", "ExBranch")
                        .WithMany()
                        .HasForeignKey("BranchID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Clients.ExClient", "Client")
                        .WithMany("ExInvoices")
                        .HasForeignKey("ClientId")
                        .HasConstraintName("FK_EX_Invoices_EX_Clients");

                    b.HasOne("Core.Entities.Sec.SecUser", "FormingResponsible")
                        .WithMany("ExInvoices")
                        .HasForeignKey("FormingResponsibleId")
                        .HasConstraintName("FK_EX_Invoices_Sec_Users");

                    b.HasOne("Core.Entities.TRN_Transfers.ExInternalTransfer", "InternalTransfer")
                        .WithMany("ExInvoices")
                        .HasForeignKey("InternalTransferId")
                        .HasConstraintName("FK_EX_Invoices_EX_InternalTransfers");

                    b.HasOne("Core.Entities.TRN_Invoices.ExInvoicesType", "InvoiceType")
                        .WithMany("ExInvoices")
                        .HasForeignKey("InvoiceTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_EX_Invoices_EX_InvoicesType");

                    b.HasOne("Core.Entities.TRN_Invoices.ExInvoiceStatus", "Status")
                        .WithMany("ExInvoices")
                        .HasForeignKey("StatusId")
                        .IsRequired()
                        .HasConstraintName("FK_EX_Invoices_EX_InvoiceStatus");

                    b.HasOne("Core.Entities.LookUps.Treasury", "Treasury")
                        .WithMany()
                        .HasForeignKey("TreasuryId");

                    b.HasOne("Core.Entities.Sec.SecUser", "SecUser")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Bank");

                    b.Navigation("Client");

                    b.Navigation("ExBranch");

                    b.Navigation("FormingResponsible");

                    b.Navigation("InternalTransfer");

                    b.Navigation("InvoiceType");

                    b.Navigation("SecUser");

                    b.Navigation("Status");

                    b.Navigation("Treasury");
                });

            modelBuilder.Entity("Core.Entities.TRN_Invoices.ExInvoicesDetail", b =>
                {
                    b.HasOne("Core.Entities.LookUps.Currency", "Currency")
                        .WithMany("ExInvoicesDetails")
                        .HasForeignKey("CurrencyId")
                        .IsRequired()
                        .HasConstraintName("FK_EX_InvoicesDetails_EX_Currencies");

                    b.HasOne("Core.Entities.TRN_Invoices.ExInvoice", "Invoice")
                        .WithMany("ExInvoicesDetails")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_EX_InvoicesDetails_EX_Invoices");

                    b.Navigation("Currency");

                    b.Navigation("Invoice");
                });

            modelBuilder.Entity("Core.Entities.TRN_Transfers.ExBranchTransfer", b =>
                {
                    b.HasOne("Core.Entities.Sec.ExBranch", "ExBranch")
                        .WithMany()
                        .HasForeignKey("BranchID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.others.SysBranch", "Branch")
                        .WithMany("ExBranchTransfers")
                        .HasForeignKey("BranchId")
                        .HasConstraintName("FK_EX_BranchTransfers_Sys_Branches");

                    b.HasOne("Core.Entities.TRN_Transfers.ExBranchTransferStatus", "Status")
                        .WithMany("ExBranchTransfers")
                        .HasForeignKey("StatusId")
                        .IsRequired()
                        .HasConstraintName("FK_EX_BranchTransfers_EX_BranchTransferStatus");

                    b.HasOne("Core.Entities.TRN_Transfers.ExBranchTransferType", "Type")
                        .WithMany("ExBranchTransfers")
                        .HasForeignKey("TypeId")
                        .IsRequired()
                        .HasConstraintName("FK_EX_BranchTransfers_EX_BranchTransferType");

                    b.HasOne("Core.Entities.Sec.SecUser", "SecUser")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Branch");

                    b.Navigation("ExBranch");

                    b.Navigation("SecUser");

                    b.Navigation("Status");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("Core.Entities.TRN_Transfers.ExBranchTransfersDetail", b =>
                {
                    b.HasOne("Core.Entities.LookUps.Currency", "Currency")
                        .WithMany("ExBranchTransfersDetails")
                        .HasForeignKey("CurrencyId")
                        .IsRequired()
                        .HasConstraintName("FK_EX_BranchTransfersDetails_EX_Currencies");

                    b.HasOne("Core.Entities.TRN_Transfers.ExBranchTransfer", "Voucher")
                        .WithMany("ExBranchTransfersDetails")
                        .HasForeignKey("VoucherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_EX_BranchTransfersDetails_EX_BranchTransfers");

                    b.Navigation("Currency");

                    b.Navigation("Voucher");
                });

            modelBuilder.Entity("Core.Entities.TRN_Transfers.ExCurrenciesBvr", b =>
                {
                    b.HasOne("Core.Entities.LookUps.Currency", "Currency")
                        .WithMany("ExCurrenciesBvrs")
                        .HasForeignKey("CurrencyId")
                        .IsRequired()
                        .HasConstraintName("FK_EX_CurrenciesValRates_EX_Currencies");

                    b.Navigation("Currency");
                });

            modelBuilder.Entity("Core.Entities.TRN_Transfers.ExInternalTransfer", b =>
                {
                    b.HasOne("Core.Entities.Sec.ExBranch", "ExBranch")
                        .WithMany()
                        .HasForeignKey("BranchID");

                    b.HasOne("Core.Entities.LookUps.Treasury", "Treasury")
                        .WithMany()
                        .HasForeignKey("TreasuryId");

                    b.HasOne("Core.Entities.Sec.SecUser", "SecUser")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("ExBranch");

                    b.Navigation("SecUser");

                    b.Navigation("Treasury");
                });

            modelBuilder.Entity("Core.Entities.TRN_Transfers.ExInternalTransfersDetail", b =>
                {
                    b.HasOne("Core.Entities.LookUps.Currency", "Currency")
                        .WithMany("ExInternalTransfersDetails")
                        .HasForeignKey("CurrencyId")
                        .IsRequired()
                        .HasConstraintName("FK_EX_InternalTransfers_Details_Ex_Currencies");

                    b.HasOne("Core.Entities.TRN_Transfers.ExInternalTransfer", "Transfer")
                        .WithMany("ExInternalTransfersDetails")
                        .HasForeignKey("TransferId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_EX_InternalTransfers_Details_EX_InternalTransfers");

                    b.Navigation("Currency");

                    b.Navigation("Transfer");
                });

            modelBuilder.Entity("Core.Entities.TRN_WholeInvoices.ExWholeInvoice", b =>
                {
                    b.HasOne("Core.Entities.LookUps.ExBank", "Bank")
                        .WithMany("ExWholeInvoices")
                        .HasForeignKey("BankId")
                        .HasConstraintName("FK_EX_WholeInvoices_EX_Banks");

                    b.HasOne("Core.Entities.Sec.ExBranch", "ExBranch")
                        .WithMany()
                        .HasForeignKey("BranchID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.TRN_Invoices.ExInvoicesType", "InvoiceType")
                        .WithMany("ExWholeInvoices")
                        .HasForeignKey("InvoiceTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_EX_WholeInvoices_EX_InvoicesType");

                    b.HasOne("Core.Entities.TRN_WholeInvoices.ExWholeInvoiceStatus", "Status")
                        .WithMany("ExWholeInvoices")
                        .HasForeignKey("StatusId")
                        .IsRequired()
                        .HasConstraintName("FK_EX_WholeInvoices_EX_WholeInvoiceStatus");

                    b.HasOne("Core.Entities.LookUps.Currency", "SupplierCurrency")
                        .WithMany("ExWholeInvoices")
                        .HasForeignKey("SupplierCurrencyId")
                        .IsRequired()
                        .HasConstraintName("FK_EX_WholeInvoices_EX_Currencies");

                    b.HasOne("Core.Entities.Clients.ExSupplier", "Supplier")
                        .WithMany("ExWholeInvoices")
                        .HasForeignKey("SupplierId")
                        .IsRequired()
                        .HasConstraintName("FK_EX_WholeInvoices_EX_Suppliers");

                    b.HasOne("Core.Entities.LookUps.Treasury", "Treasury")
                        .WithMany()
                        .HasForeignKey("TreasuryId");

                    b.HasOne("Core.Entities.Sec.SecUser", "SecUser")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Bank");

                    b.Navigation("ExBranch");

                    b.Navigation("InvoiceType");

                    b.Navigation("SecUser");

                    b.Navigation("Status");

                    b.Navigation("Supplier");

                    b.Navigation("SupplierCurrency");

                    b.Navigation("Treasury");
                });

            modelBuilder.Entity("Core.Entities.TRN_WholeInvoices.ExWholeInvoicesDetail", b =>
                {
                    b.HasOne("Core.Entities.LookUps.Currency", "Currency")
                        .WithMany("ExWholeInvoicesDetails")
                        .HasForeignKey("CurrencyId")
                        .IsRequired()
                        .HasConstraintName("FK_EX_WholeInvoices_Details_EX_Currencies");

                    b.HasOne("Core.Entities.TRN_WholeInvoices.ExWholeInvoice", "Invoice")
                        .WithMany("ExWholeInvoicesDetails")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_EX_WholeInvoices_Details_EX_WholeInvoices");

                    b.Navigation("Currency");

                    b.Navigation("Invoice");
                });

            modelBuilder.Entity("Core.Entities.Taswya.ExTaswya", b =>
                {
                    b.HasOne("Core.Entities.Sec.ExBranch", "ExBranch")
                        .WithMany()
                        .HasForeignKey("BranchID");

                    b.HasOne("Core.Entities.LookUps.Treasury", "Treasury")
                        .WithMany()
                        .HasForeignKey("TreasuryId");

                    b.HasOne("Core.Entities.Sec.SecUser", "SecUser")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("ExBranch");

                    b.Navigation("SecUser");

                    b.Navigation("Treasury");
                });

            modelBuilder.Entity("Core.Entities.Taswya.ExTaswyaDetail", b =>
                {
                    b.HasOne("Core.Entities.LookUps.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Taswya.ExTaswya", "ExTaswya")
                        .WithMany("ExTaswyaDetails")
                        .HasForeignKey("TransferId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Currency");

                    b.Navigation("ExTaswya");
                });

            modelBuilder.Entity("Core.Entities.TreasuryTransfere.ExTreasuryTransfere", b =>
                {
                    b.HasOne("Core.Entities.Sec.ExBranch", "FromExBranch")
                        .WithMany()
                        .HasForeignKey("FromBranchID");

                    b.HasOne("Core.Entities.LookUps.Treasury", "FromTreasury")
                        .WithMany()
                        .HasForeignKey("FromTreasuryId");

                    b.HasOne("Core.Entities.Sec.ExBranch", "ToExBranch")
                        .WithMany()
                        .HasForeignKey("ToBranchID");

                    b.HasOne("Core.Entities.LookUps.Treasury", "ToTreasury")
                        .WithMany()
                        .HasForeignKey("ToTreasuryId");

                    b.HasOne("Core.Entities.Sec.SecUser", "SecUser")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("FromExBranch");

                    b.Navigation("FromTreasury");

                    b.Navigation("SecUser");

                    b.Navigation("ToExBranch");

                    b.Navigation("ToTreasury");
                });

            modelBuilder.Entity("Core.Entities.TreasuryTransfere.ExTreasuryTransfereDetail", b =>
                {
                    b.HasOne("Core.Entities.LookUps.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.TreasuryTransfere.ExTreasuryTransfere", "ExTreasuryTransfere")
                        .WithMany("ExTreasuryTransfereDetail")
                        .HasForeignKey("TransferId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Currency");

                    b.Navigation("ExTreasuryTransfere");
                });

            modelBuilder.Entity("Core.Entities.Workflow.WFListOfApprovals", b =>
                {
                    b.HasOne("Core.Entities.Sec.ExBranch", "ExBranch")
                        .WithMany()
                        .HasForeignKey("BranchID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Workflow.WFRequestType", "WFRequestType")
                        .WithMany()
                        .HasForeignKey("RequestTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ExBranch");

                    b.Navigation("WFRequestType");
                });

            modelBuilder.Entity("Core.Entities.Workflow.WFRequest", b =>
                {
                    b.HasOne("Core.Entities.Sec.ExBranch", "ExBranch")
                        .WithMany()
                        .HasForeignKey("BranchID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Workflow.WFRequestType", "WFRequestType")
                        .WithMany()
                        .HasForeignKey("RequestTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Sec.SecUser", "SecUser")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("ExBranch");

                    b.Navigation("SecUser");

                    b.Navigation("WFRequestType");
                });

            modelBuilder.Entity("Core.Entities.Workflow.WFRequestDetails", b =>
                {
                    b.HasOne("Core.Entities.Workflow.WFRequest", "WFRequest")
                        .WithMany()
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Sec.SecUser", "SecUser")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("SecUser");

                    b.Navigation("WFRequest");
                });

            modelBuilder.Entity("Core.Entities.banks.BankAccount", b =>
                {
                    b.HasOne("Core.Entities.LookUps.ExBank", "ExBank")
                        .WithMany()
                        .HasForeignKey("BankId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.LookUps.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Currency");

                    b.Navigation("ExBank");
                });

            modelBuilder.Entity("Core.Entities.banks.BanksBvr", b =>
                {
                    b.HasOne("Core.Entities.banks.BankAccount", "BankAccount")
                        .WithMany()
                        .HasForeignKey("BankAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BankAccount");
                });

            modelBuilder.Entity("Core.Entities.banks.BanksTreasuryTransfere", b =>
                {
                    b.HasOne("Core.Entities.LookUps.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Currency");
                });

            modelBuilder.Entity("Core.Entities.others.AJv", b =>
                {
                    b.HasOne("Core.Entities.Sec.ExBranch", "ExBranch")
                        .WithMany()
                        .HasForeignKey("BranchID");

                    b.HasOne("Core.Entities.TRN_Transfers.ExBranchTransfer", "BranchTransfer")
                        .WithMany("AJvs")
                        .HasForeignKey("BranchTransferId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_A_JVs_EX_BranchTransfers");

                    b.HasOne("Core.Entities.Account.ACashFlow", "CashFlow")
                        .WithMany("AJvs")
                        .HasForeignKey("CashFlowId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_A_JVs_A_CashFlow");

                    b.HasOne("Core.Entities.TRN_Invoices.ExInvoice", "Invoice")
                        .WithMany("AJvs")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_A_JVs_EX_Invoices");

                    b.HasOne("Core.Entities.others.AJvstatus", "Jvstatus")
                        .WithMany("AJvs")
                        .HasForeignKey("JvstatusId")
                        .IsRequired()
                        .HasConstraintName("FK_A_JVs_A_JVStatus");

                    b.HasOne("Core.Entities.others.AJvtype", "Jvtype")
                        .WithMany("AJvs")
                        .HasForeignKey("JvtypeId")
                        .IsRequired()
                        .HasConstraintName("FK_A_JVs_A_JVType");

                    b.HasOne("Core.Entities.Taswya.ExTaswya", "ExTaswya")
                        .WithMany()
                        .HasForeignKey("TaswyaTransferId");

                    b.HasOne("Core.Entities.TreasuryTransfere.ExTreasuryTransfere", "ExTreasuryTransfere")
                        .WithMany()
                        .HasForeignKey("TreasuryTransferId");

                    b.HasOne("Core.Entities.TRN_WholeInvoices.ExWholeInvoice", "WholeInvoice")
                        .WithMany("AJvs")
                        .HasForeignKey("WholeInvoiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_A_JVs_EX_WholeInvoices");

                    b.Navigation("BranchTransfer");

                    b.Navigation("CashFlow");

                    b.Navigation("ExBranch");

                    b.Navigation("ExTaswya");

                    b.Navigation("ExTreasuryTransfere");

                    b.Navigation("Invoice");

                    b.Navigation("Jvstatus");

                    b.Navigation("Jvtype");

                    b.Navigation("WholeInvoice");
                });

            modelBuilder.Entity("Core.Entities.others.AJvsDetail", b =>
                {
                    b.HasOne("Core.Entities.Account.AAccount", "Account")
                        .WithMany("AJvsDetails")
                        .HasForeignKey("AccountId")
                        .IsRequired()
                        .HasConstraintName("FK_A_JVsDetails_A_Accounts");

                    b.HasOne("Core.Entities.LookUps.Currency", "Currency")
                        .WithMany("AJvsDetails")
                        .HasForeignKey("CurrencyId")
                        .IsRequired()
                        .HasConstraintName("FK_A_JVsDetails_EX_Currencies");

                    b.HasOne("Core.Entities.others.AJv", "Jv")
                        .WithMany("AJvsDetails")
                        .HasForeignKey("Jvid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_A_JVsDetails_A_JVs");

                    b.Navigation("Account");

                    b.Navigation("Currency");

                    b.Navigation("Jv");
                });

            modelBuilder.Entity("Core.Entities.others.ExInternalTransfersClosingDetail", b =>
                {
                    b.HasOne("Core.Entities.TRN_Transfers.ExInternalTransfer", "Transfer")
                        .WithMany("ExInternalTransfersClosingDetails")
                        .HasForeignKey("TransferId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_EX_InternalTransfersClosingDetails_EX_InternalTransfers");

                    b.Navigation("Transfer");
                });

            modelBuilder.Entity("Core.Entities.others.ExInternalTransfersDetailsTemp", b =>
                {
                    b.HasOne("Core.Entities.LookUps.Currency", "Currency")
                        .WithMany("ExInternalTransfersDetailsTemps")
                        .HasForeignKey("CurrencyId")
                        .IsRequired()
                        .HasConstraintName("FK_EX_InternalTransfersDetailsTemp_EX_Currencies");

                    b.HasOne("Core.Entities.TRN_Transfers.ExInternalTransfer", "Transfer")
                        .WithMany("ExInternalTransfersDetailsTemps")
                        .HasForeignKey("TransferId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_EX_InternalTransfersDetailsTemp_EX_InternalTransfers");

                    b.Navigation("Currency");

                    b.Navigation("Transfer");
                });

            modelBuilder.Entity("Core.Entities.others.ExSetting", b =>
                {
                    b.HasOne("Core.Entities.Account.AAccount", "AccountIdBanksNavigation")
                        .WithMany("ExSettingAccountIdBanksNavigations")
                        .HasForeignKey("AccountIdBanks")
                        .HasConstraintName("FK_EX_Settings_AccountID_Banks");

                    b.HasOne("Core.Entities.Account.AAccount", "AccountIdCapitalNavigation")
                        .WithMany("ExSettingAccountIdCapitalNavigations")
                        .HasForeignKey("AccountIdCapital")
                        .HasConstraintName("FK_EX_Settings_AccountID_Capital");

                    b.HasOne("Core.Entities.Account.AAccount", "AccountIdCashNavigation")
                        .WithMany("ExSettingAccountIdCashNavigations")
                        .HasForeignKey("AccountIdCash")
                        .HasConstraintName("FK_EX_Settings_AccountID_Cash");

                    b.HasOne("Core.Entities.Account.AAccount", "AccountIdCommissionNavigation")
                        .WithMany("ExSettingAccountIdCommissionNavigations")
                        .HasForeignKey("AccountIdCommission")
                        .HasConstraintName("FK_EX_Settings_AccountID_Commission");

                    b.HasOne("Core.Entities.Account.AAccount", "AccountIdInvStartNavigation")
                        .WithMany("ExSettingAccountIdInvStartNavigations")
                        .HasForeignKey("AccountIdInvStart")
                        .HasConstraintName("FK_EX_Settings_AccountID_Currencies");

                    b.HasOne("Core.Entities.Account.AAccount", "AccountIdMainBranchNavigation")
                        .WithMany("ExSettingAccountIdMainBranchNavigations")
                        .HasForeignKey("AccountIdMainBranch")
                        .HasConstraintName("FK_EX_Settings_AccountID_MainBranch");

                    b.HasOne("Core.Entities.Account.AAccount", "AccountIdPurchasesNavigation")
                        .WithMany("ExSettingAccountIdPurchasesNavigations")
                        .HasForeignKey("AccountIdPurchases")
                        .HasConstraintName("FK_EX_Settings_AccountID_Purchases");

                    b.HasOne("Core.Entities.Account.AAccount", "AccountIdSalesNavigation")
                        .WithMany("ExSettingAccountIdSalesNavigations")
                        .HasForeignKey("AccountIdSales")
                        .HasConstraintName("FK_EX_Settings_AccountID_Sales");

                    b.HasOne("Core.Entities.Account.AAccount", "AccountIdSuppliersNavigation")
                        .WithMany("ExSettingAccountIdSuppliersNavigations")
                        .HasForeignKey("AccountIdSuppliers")
                        .HasConstraintName("FK_EX_Settings_AccountID_Suppliers");

                    b.HasOne("Core.Entities.Account.AAccount", "AccountIdZakatExpNavigation")
                        .WithMany("ExSettingAccountIdZakatExpNavigations")
                        .HasForeignKey("AccountIdZakatExp")
                        .HasConstraintName("FK_EX_Settings_AccountID_Zakat");

                    b.Navigation("AccountIdBanksNavigation");

                    b.Navigation("AccountIdCapitalNavigation");

                    b.Navigation("AccountIdCashNavigation");

                    b.Navigation("AccountIdCommissionNavigation");

                    b.Navigation("AccountIdInvStartNavigation");

                    b.Navigation("AccountIdMainBranchNavigation");

                    b.Navigation("AccountIdPurchasesNavigation");

                    b.Navigation("AccountIdSalesNavigation");

                    b.Navigation("AccountIdSuppliersNavigation");

                    b.Navigation("AccountIdZakatExpNavigation");
                });

            modelBuilder.Entity("Core.Entities.others.SysBackup", b =>
                {
                    b.HasOne("Core.Entities.Sec.SecUser", "User")
                        .WithMany("SysBackups")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_Sys_Backups_Sec_Users");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Core.Entities.others.SysBranch", b =>
                {
                    b.HasOne("Core.Entities.Account.AAccount", "Account")
                        .WithMany("SysBranches")
                        .HasForeignKey("AccountId")
                        .HasConstraintName("FK_Sys_Branches_A_Accounts");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("Core.Entities.Account.AAccount", b =>
                {
                    b.Navigation("AJvsDetails");

                    b.Navigation("ExBanks");

                    b.Navigation("ExSettingAccountIdBanksNavigations");

                    b.Navigation("ExSettingAccountIdCapitalNavigations");

                    b.Navigation("ExSettingAccountIdCashNavigations");

                    b.Navigation("ExSettingAccountIdCommissionNavigations");

                    b.Navigation("ExSettingAccountIdInvStartNavigations");

                    b.Navigation("ExSettingAccountIdMainBranchNavigations");

                    b.Navigation("ExSettingAccountIdPurchasesNavigations");

                    b.Navigation("ExSettingAccountIdSalesNavigations");

                    b.Navigation("ExSettingAccountIdSuppliersNavigations");

                    b.Navigation("ExSettingAccountIdZakatExpNavigations");

                    b.Navigation("ExSuppliers");

                    b.Navigation("InverseDepreciationAccount");

                    b.Navigation("InverseParent");

                    b.Navigation("InverseProvisionAccount");

                    b.Navigation("SysBranches");
                });

            modelBuilder.Entity("Core.Entities.Account.ACashFlow", b =>
                {
                    b.Navigation("AJvs");
                });

            modelBuilder.Entity("Core.Entities.Account.ACashFlowStatus", b =>
                {
                    b.Navigation("ACashFlows");
                });

            modelBuilder.Entity("Core.Entities.Account.ACashFlowType", b =>
                {
                    b.Navigation("ACashFlows");
                });

            modelBuilder.Entity("Core.Entities.Clients.ExAttachmentType", b =>
                {
                    b.Navigation("ExClientsAttachments");
                });

            modelBuilder.Entity("Core.Entities.Clients.ExClient", b =>
                {
                    b.Navigation("ExClientsAttachments");

                    b.Navigation("ExClientsMemberships");

                    b.Navigation("ExClientsNote");

                    b.Navigation("ExClientsRepresentatives");

                    b.Navigation("ExInvoices");
                });

            modelBuilder.Entity("Core.Entities.Clients.ExSupplier", b =>
                {
                    b.Navigation("ACashFlows");

                    b.Navigation("ExWholeInvoices");
                });

            modelBuilder.Entity("Core.Entities.Clients.ExSuppliersType", b =>
                {
                    b.Navigation("ExSuppliers");
                });

            modelBuilder.Entity("Core.Entities.LookUps.Currency", b =>
                {
                    b.Navigation("ACashFlows");

                    b.Navigation("AJvsDetails");

                    b.Navigation("ExBranchTransfersDetails");

                    b.Navigation("ExCurrenciesBvrs");

                    b.Navigation("ExInternalTransfersDetails");

                    b.Navigation("ExInternalTransfersDetailsTemps");

                    b.Navigation("ExInvoicesDetails");

                    b.Navigation("ExSuppliers");

                    b.Navigation("ExWholeInvoices");

                    b.Navigation("ExWholeInvoicesDetails");
                });

            modelBuilder.Entity("Core.Entities.LookUps.ExBank", b =>
                {
                    b.Navigation("ExInvoices");

                    b.Navigation("ExWholeInvoices");
                });

            modelBuilder.Entity("Core.Entities.LookUps.ExClientJobSeverity", b =>
                {
                    b.Navigation("ExClientJobs");

                    b.Navigation("ExCountries");
                });

            modelBuilder.Entity("Core.Entities.LookUps.ExCountry", b =>
                {
                    b.Navigation("ExClientBirthCountries");

                    b.Navigation("ExClientCountries");

                    b.Navigation("ExIdsources");

                    b.Navigation("ExSuppliers");
                });

            modelBuilder.Entity("Core.Entities.LookUps.ExExchangePurpose", b =>
                {
                    b.Navigation("ExClients");
                });

            modelBuilder.Entity("Core.Entities.LookUps.ExIdsource", b =>
                {
                    b.Navigation("ExClientBirthCities");

                    b.Navigation("ExClientIdsourceNavigations");
                });

            modelBuilder.Entity("Core.Entities.LookUps.ExIncomeSource", b =>
                {
                    b.Navigation("ExClients");
                });

            modelBuilder.Entity("Core.Entities.Sec.ExBranch", b =>
                {
                    b.Navigation("SecUsers");
                });

            modelBuilder.Entity("Core.Entities.Sec.SecForm", b =>
                {
                    b.Navigation("SecFormsFunctions");

                    b.Navigation("SecTransactionLogs");

                    b.Navigation("SecUsersForms");
                });

            modelBuilder.Entity("Core.Entities.Sec.SecFormsFunction", b =>
                {
                    b.Navigation("SecUsersFunctions");
                });

            modelBuilder.Entity("Core.Entities.Sec.SecFunction", b =>
                {
                    b.Navigation("SecFormsFunctions");

                    b.Navigation("SecTransactionLogs");
                });

            modelBuilder.Entity("Core.Entities.Sec.SecPermissionType", b =>
                {
                    b.Navigation("SecUsers");

                    b.Navigation("SecUsersForms");

                    b.Navigation("SecUsersFunctions");
                });

            modelBuilder.Entity("Core.Entities.Sec.SecUser", b =>
                {
                    b.Navigation("ACashFlows");

                    b.Navigation("ExInvoices");

                    b.Navigation("SecTransactionLogs");

                    b.Navigation("SecUsersForms");

                    b.Navigation("SecUsersFunctions");

                    b.Navigation("SysBackups");
                });

            modelBuilder.Entity("Core.Entities.TRN_Invoices.ExInvoice", b =>
                {
                    b.Navigation("AJvs");

                    b.Navigation("ExInvoicesDetails");
                });

            modelBuilder.Entity("Core.Entities.TRN_Invoices.ExInvoiceStatus", b =>
                {
                    b.Navigation("ExInvoices");
                });

            modelBuilder.Entity("Core.Entities.TRN_Invoices.ExInvoicesType", b =>
                {
                    b.Navigation("ExInvoices");

                    b.Navigation("ExWholeInvoices");
                });

            modelBuilder.Entity("Core.Entities.TRN_Transfers.ExBranchTransfer", b =>
                {
                    b.Navigation("AJvs");

                    b.Navigation("ExBranchTransfersDetails");
                });

            modelBuilder.Entity("Core.Entities.TRN_Transfers.ExBranchTransferStatus", b =>
                {
                    b.Navigation("ExBranchTransfers");
                });

            modelBuilder.Entity("Core.Entities.TRN_Transfers.ExBranchTransferType", b =>
                {
                    b.Navigation("ExBranchTransfers");
                });

            modelBuilder.Entity("Core.Entities.TRN_Transfers.ExInternalTransfer", b =>
                {
                    b.Navigation("ExInternalTransfersClosingDetails");

                    b.Navigation("ExInternalTransfersDetails");

                    b.Navigation("ExInternalTransfersDetailsTemps");

                    b.Navigation("ExInvoices");
                });

            modelBuilder.Entity("Core.Entities.TRN_WholeInvoices.ExWholeInvoice", b =>
                {
                    b.Navigation("AJvs");

                    b.Navigation("ExWholeInvoicesDetails");
                });

            modelBuilder.Entity("Core.Entities.TRN_WholeInvoices.ExWholeInvoiceStatus", b =>
                {
                    b.Navigation("ExWholeInvoices");
                });

            modelBuilder.Entity("Core.Entities.Taswya.ExTaswya", b =>
                {
                    b.Navigation("ExTaswyaDetails");
                });

            modelBuilder.Entity("Core.Entities.TreasuryTransfere.ExTreasuryTransfere", b =>
                {
                    b.Navigation("ExTreasuryTransfereDetail");
                });

            modelBuilder.Entity("Core.Entities.others.AJv", b =>
                {
                    b.Navigation("AJvsDetails");
                });

            modelBuilder.Entity("Core.Entities.others.AJvstatus", b =>
                {
                    b.Navigation("AJvs");
                });

            modelBuilder.Entity("Core.Entities.others.AJvtype", b =>
                {
                    b.Navigation("AJvs");
                });

            modelBuilder.Entity("Core.Entities.others.SysBranch", b =>
                {
                    b.Navigation("ExBranchTransfers");
                });
#pragma warning restore 612, 618
        }
    }
}
